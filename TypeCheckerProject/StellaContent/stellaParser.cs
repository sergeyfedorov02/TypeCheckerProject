//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\RiderProjects\TypeCheckerProject\TypeCheckerProject\StellaContent\stellaParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class stellaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Surrogate_id_SYMB_0=1, Surrogate_id_SYMB_1=2, Surrogate_id_SYMB_2=3, Surrogate_id_SYMB_3=4, 
		Surrogate_id_SYMB_4=5, Surrogate_id_SYMB_5=6, Surrogate_id_SYMB_6=7, Surrogate_id_SYMB_7=8, 
		Surrogate_id_SYMB_8=9, Surrogate_id_SYMB_9=10, Surrogate_id_SYMB_10=11, 
		Surrogate_id_SYMB_11=12, Surrogate_id_SYMB_12=13, Surrogate_id_SYMB_13=14, 
		Surrogate_id_SYMB_14=15, Surrogate_id_SYMB_15=16, Surrogate_id_SYMB_16=17, 
		Surrogate_id_SYMB_17=18, Surrogate_id_SYMB_18=19, Surrogate_id_SYMB_19=20, 
		Surrogate_id_SYMB_20=21, Surrogate_id_SYMB_21=22, Surrogate_id_SYMB_22=23, 
		Surrogate_id_SYMB_23=24, Surrogate_id_SYMB_24=25, Surrogate_id_SYMB_25=26, 
		Surrogate_id_SYMB_26=27, Surrogate_id_SYMB_27=28, Surrogate_id_SYMB_28=29, 
		Surrogate_id_SYMB_29=30, Surrogate_id_SYMB_30=31, Surrogate_id_SYMB_31=32, 
		Surrogate_id_SYMB_32=33, Surrogate_id_SYMB_33=34, Surrogate_id_SYMB_34=35, 
		Surrogate_id_SYMB_35=36, Surrogate_id_SYMB_36=37, Surrogate_id_SYMB_37=38, 
		Surrogate_id_SYMB_38=39, Surrogate_id_SYMB_39=40, Surrogate_id_SYMB_40=41, 
		Surrogate_id_SYMB_41=42, Surrogate_id_SYMB_42=43, Surrogate_id_SYMB_43=44, 
		Surrogate_id_SYMB_44=45, Surrogate_id_SYMB_45=46, Surrogate_id_SYMB_46=47, 
		Surrogate_id_SYMB_47=48, Surrogate_id_SYMB_48=49, Surrogate_id_SYMB_49=50, 
		Surrogate_id_SYMB_50=51, Surrogate_id_SYMB_51=52, Surrogate_id_SYMB_52=53, 
		Surrogate_id_SYMB_53=54, Surrogate_id_SYMB_54=55, Surrogate_id_SYMB_55=56, 
		Surrogate_id_SYMB_56=57, Surrogate_id_SYMB_57=58, Surrogate_id_SYMB_58=59, 
		Surrogate_id_SYMB_59=60, Surrogate_id_SYMB_60=61, Surrogate_id_SYMB_61=62, 
		Surrogate_id_SYMB_62=63, Surrogate_id_SYMB_63=64, Surrogate_id_SYMB_64=65, 
		Surrogate_id_SYMB_65=66, EXCEPTION=67, VARIANT=68, CAST=69, ASSIGN=70, 
		REF_TYPE=71, REFERENCE=72, PANIC=73, THROW=74, TRY=75, CATCH=76, TOP_TYPE=77, 
		BOTTOM_TYPE=78, GENERIC=79, FORALL=80, COMMENT_antlr_builtin=81, MULTICOMMENT_antlr_builtin=82, 
		StellaIdent=83, ExtensionName=84, MemoryAddress=85, INTEGER=86, WS=87, 
		ErrorToken=88;
	public const int
		RULE_start_Program = 0, RULE_start_Expr = 1, RULE_start_Type = 2, RULE_program = 3, 
		RULE_languageDecl = 4, RULE_extension = 5, RULE_decl = 6, RULE_annotation = 7, 
		RULE_paramDecl = 8, RULE_expr = 9, RULE_patternBinding = 10, RULE_binding = 11, 
		RULE_matchCase = 12, RULE_pattern = 13, RULE_labelledPattern = 14, RULE_stellatype = 15, 
		RULE_recordFieldType = 16, RULE_variantFieldType = 17;
	public static readonly string[] ruleNames = {
		"start_Program", "start_Expr", "start_Type", "program", "languageDecl", 
		"extension", "decl", "annotation", "paramDecl", "expr", "patternBinding", 
		"binding", "matchCase", "pattern", "labelledPattern", "stellatype", "recordFieldType", 
		"variantFieldType"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "';'", "'('", "')'", "'{'", "'}'", "'='", "':'", "'->'", 
		"'=>'", "'|'", "'<|'", "'|>'", "'['", "']'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "'+'", "'-'", "'*'", "'/'", "'.'", "'List::head'", "'List::isempty'", 
		"'List::tail'", "'Nat::pred'", "'Nat::iszero'", "'Nat::rec'", "'Bool'", 
		"'Nat'", "'Unit'", "'and'", "'as'", "'cons'", "'core'", "'else'", "'extend'", 
		"'false'", "'fix'", "'fn'", "'fold'", "'if'", "'in'", "'inl'", "'inline'", 
		"'inr'", "'language'", "'let'", "'letrec'", "'match'", "'not'", "'or'", 
		"'return'", "'succ'", "'then'", "'throws'", "'true'", "'type'", "'unfold'", 
		"'unit'", "'with'", "'\u00B5'", "'exception'", "'variant'", "'cast'", 
		"':='", "'&'", "'new'", "'panic!'", "'throw'", "'try'", "'catch'", "'Top'", 
		"'Bot'", "'generic'", "'forall'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", "Surrogate_id_SYMB_2", 
		"Surrogate_id_SYMB_3", "Surrogate_id_SYMB_4", "Surrogate_id_SYMB_5", "Surrogate_id_SYMB_6", 
		"Surrogate_id_SYMB_7", "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", "Surrogate_id_SYMB_10", 
		"Surrogate_id_SYMB_11", "Surrogate_id_SYMB_12", "Surrogate_id_SYMB_13", 
		"Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", "Surrogate_id_SYMB_16", 
		"Surrogate_id_SYMB_17", "Surrogate_id_SYMB_18", "Surrogate_id_SYMB_19", 
		"Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", "Surrogate_id_SYMB_22", 
		"Surrogate_id_SYMB_23", "Surrogate_id_SYMB_24", "Surrogate_id_SYMB_25", 
		"Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", "Surrogate_id_SYMB_28", 
		"Surrogate_id_SYMB_29", "Surrogate_id_SYMB_30", "Surrogate_id_SYMB_31", 
		"Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", "Surrogate_id_SYMB_34", 
		"Surrogate_id_SYMB_35", "Surrogate_id_SYMB_36", "Surrogate_id_SYMB_37", 
		"Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", "Surrogate_id_SYMB_40", 
		"Surrogate_id_SYMB_41", "Surrogate_id_SYMB_42", "Surrogate_id_SYMB_43", 
		"Surrogate_id_SYMB_44", "Surrogate_id_SYMB_45", "Surrogate_id_SYMB_46", 
		"Surrogate_id_SYMB_47", "Surrogate_id_SYMB_48", "Surrogate_id_SYMB_49", 
		"Surrogate_id_SYMB_50", "Surrogate_id_SYMB_51", "Surrogate_id_SYMB_52", 
		"Surrogate_id_SYMB_53", "Surrogate_id_SYMB_54", "Surrogate_id_SYMB_55", 
		"Surrogate_id_SYMB_56", "Surrogate_id_SYMB_57", "Surrogate_id_SYMB_58", 
		"Surrogate_id_SYMB_59", "Surrogate_id_SYMB_60", "Surrogate_id_SYMB_61", 
		"Surrogate_id_SYMB_62", "Surrogate_id_SYMB_63", "Surrogate_id_SYMB_64", 
		"Surrogate_id_SYMB_65", "EXCEPTION", "VARIANT", "CAST", "ASSIGN", "REF_TYPE", 
		"REFERENCE", "PANIC", "THROW", "TRY", "CATCH", "TOP_TYPE", "BOTTOM_TYPE", 
		"GENERIC", "FORALL", "COMMENT_antlr_builtin", "MULTICOMMENT_antlr_builtin", 
		"StellaIdent", "ExtensionName", "MemoryAddress", "INTEGER", "WS", "ErrorToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stellaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static stellaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public stellaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public stellaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Start_ProgramContext : ParserRuleContext {
		public ProgramContext x;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(stellaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public Start_ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_Program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_ProgramContext start_Program() {
		Start_ProgramContext _localctx = new Start_ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_start_Program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_localctx.x = program();
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ExprContext : ParserRuleContext {
		public ExprContext x;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(stellaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Start_ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_ExprContext start_Expr() {
		Start_ExprContext _localctx = new Start_ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_start_Expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_localctx.x = expr(0);
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_TypeContext : ParserRuleContext {
		public StellatypeContext x;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(stellaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public Start_TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_Type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_TypeContext start_Type() {
		Start_TypeContext _localctx = new Start_TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_start_Type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_localctx.x = stellatype(0);
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public ExtensionContext _extension;
		public IList<ExtensionContext> _extensions = new List<ExtensionContext>();
		public DeclContext _decl;
		public IList<DeclContext> _decls = new List<DeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public LanguageDeclContext languageDecl() {
			return GetRuleContext<LanguageDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext[] extension() {
			return GetRuleContexts<ExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext extension(int i) {
			return GetRuleContext<ExtensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 6, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			languageDecl();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Surrogate_id_SYMB_40) {
				{
				{
				State = 46;
				_localctx._extension = extension();
				_localctx._extensions.Add(_localctx._extension);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Surrogate_id_SYMB_43 - 44)) | (1L << (Surrogate_id_SYMB_48 - 44)) | (1L << (Surrogate_id_SYMB_61 - 44)) | (1L << (EXCEPTION - 44)) | (1L << (GENERIC - 44)))) != 0)) {
				{
				{
				State = 52;
				_localctx._decl = decl();
				_localctx._decls.Add(_localctx._decl);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanguageDeclContext : ParserRuleContext {
		public LanguageDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_languageDecl; } }
	 
		public LanguageDeclContext() { }
		public virtual void CopyFrom(LanguageDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LanguageCoreContext : LanguageDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_50() { return GetToken(stellaParser.Surrogate_id_SYMB_50, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_38() { return GetToken(stellaParser.Surrogate_id_SYMB_38, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(stellaParser.Surrogate_id_SYMB_1, 0); }
		public LanguageCoreContext(LanguageDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanguageCore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanguageDeclContext languageDecl() {
		LanguageDeclContext _localctx = new LanguageDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_languageDecl);
		try {
			_localctx = new LanguageCoreContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(Surrogate_id_SYMB_50);
			State = 59;
			Match(Surrogate_id_SYMB_38);
			State = 60;
			Match(Surrogate_id_SYMB_1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
	 
		public ExtensionContext() { }
		public virtual void CopyFrom(ExtensionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnExtensionContext : ExtensionContext {
		public IToken _ExtensionName;
		public IList<IToken> _extensionNames = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_40() { return GetToken(stellaParser.Surrogate_id_SYMB_40, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_64() { return GetToken(stellaParser.Surrogate_id_SYMB_64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(stellaParser.Surrogate_id_SYMB_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExtensionName() { return GetTokens(stellaParser.ExtensionName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExtensionName(int i) {
			return GetToken(stellaParser.ExtensionName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public AnExtensionContext(ExtensionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 10, RULE_extension);
		int _la;
		try {
			_localctx = new AnExtensionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(Surrogate_id_SYMB_40);
			State = 63;
			Match(Surrogate_id_SYMB_64);
			State = 64;
			((AnExtensionContext)_localctx)._ExtensionName = Match(ExtensionName);
			((AnExtensionContext)_localctx)._extensionNames.Add(((AnExtensionContext)_localctx)._ExtensionName);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Surrogate_id_SYMB_0) {
				{
				{
				State = 65;
				Match(Surrogate_id_SYMB_0);
				State = 66;
				((AnExtensionContext)_localctx)._ExtensionName = Match(ExtensionName);
				((AnExtensionContext)_localctx)._extensionNames.Add(((AnExtensionContext)_localctx)._ExtensionName);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(Surrogate_id_SYMB_1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
	 
		public DeclContext() { }
		public virtual void CopyFrom(DeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclTypeAliasContext : DeclContext {
		public IToken name;
		public StellatypeContext atype;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_61() { return GetToken(stellaParser.Surrogate_id_SYMB_61, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public DeclTypeAliasContext(DeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclTypeAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclExceptionTypeContext : DeclContext {
		public StellatypeContext exceptionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(stellaParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_61() { return GetToken(stellaParser.Surrogate_id_SYMB_61, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public DeclExceptionTypeContext(DeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclExceptionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclFunContext : DeclContext {
		public AnnotationContext _annotation;
		public IList<AnnotationContext> _annotations = new List<AnnotationContext>();
		public IToken name;
		public ParamDeclContext _paramDecl;
		public IList<ParamDeclContext> _paramDecls = new List<ParamDeclContext>();
		public StellatypeContext returnType;
		public StellatypeContext _stellatype;
		public IList<StellatypeContext> _throwTypes = new List<StellatypeContext>();
		public DeclContext _decl;
		public IList<DeclContext> _localDecls = new List<DeclContext>();
		public ExprContext returnExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_43() { return GetToken(stellaParser.Surrogate_id_SYMB_43, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_56() { return GetToken(stellaParser.Surrogate_id_SYMB_56, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(stellaParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_59() { return GetToken(stellaParser.Surrogate_id_SYMB_59, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext[] paramDecl() {
			return GetRuleContexts<ParamDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext paramDecl(int i) {
			return GetRuleContext<ParamDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public DeclFunContext(DeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclFun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclExceptionVariantContext : DeclContext {
		public IToken name;
		public StellatypeContext variantType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(stellaParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(stellaParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_7() { return GetToken(stellaParser.Surrogate_id_SYMB_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public DeclExceptionVariantContext(DeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclExceptionVariant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclFunGenericContext : DeclContext {
		public AnnotationContext _annotation;
		public IList<AnnotationContext> _annotations = new List<AnnotationContext>();
		public IToken name;
		public IToken _StellaIdent;
		public IList<IToken> _generics = new List<IToken>();
		public ParamDeclContext _paramDecl;
		public IList<ParamDeclContext> _paramDecls = new List<ParamDeclContext>();
		public StellatypeContext returnType;
		public StellatypeContext _stellatype;
		public IList<StellatypeContext> _throwTypes = new List<StellatypeContext>();
		public DeclContext _decl;
		public IList<DeclContext> _localDecls = new List<DeclContext>();
		public ExprContext returnExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(stellaParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_43() { return GetToken(stellaParser.Surrogate_id_SYMB_43, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_56() { return GetToken(stellaParser.Surrogate_id_SYMB_56, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StellaIdent() { return GetTokens(stellaParser.StellaIdent); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent(int i) {
			return GetToken(stellaParser.StellaIdent, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(stellaParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_59() { return GetToken(stellaParser.Surrogate_id_SYMB_59, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext[] paramDecl() {
			return GetRuleContexts<ParamDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext paramDecl(int i) {
			return GetRuleContext<ParamDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclFunGenericContext(DeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclFunGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_decl);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new DeclFunContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_48) {
					{
					{
					State = 74;
					((DeclFunContext)_localctx)._annotation = annotation();
					((DeclFunContext)_localctx)._annotations.Add(((DeclFunContext)_localctx)._annotation);
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 80;
				Match(Surrogate_id_SYMB_43);
				State = 81;
				((DeclFunContext)_localctx).name = Match(StellaIdent);
				State = 82;
				Match(Surrogate_id_SYMB_2);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StellaIdent) {
					{
					State = 83;
					((DeclFunContext)_localctx)._paramDecl = paramDecl();
					((DeclFunContext)_localctx)._paramDecls.Add(((DeclFunContext)_localctx)._paramDecl);
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 84;
						Match(Surrogate_id_SYMB_0);
						State = 85;
						((DeclFunContext)_localctx)._paramDecl = paramDecl();
						((DeclFunContext)_localctx)._paramDecls.Add(((DeclFunContext)_localctx)._paramDecl);
						}
						}
						State = 90;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 93;
				Match(Surrogate_id_SYMB_3);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_8) {
					{
					State = 94;
					Match(Surrogate_id_SYMB_8);
					State = 95;
					((DeclFunContext)_localctx).returnType = stellatype(0);
					}
				}

				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_59) {
					{
					State = 98;
					Match(Surrogate_id_SYMB_59);
					State = 99;
					((DeclFunContext)_localctx)._stellatype = stellatype(0);
					((DeclFunContext)_localctx)._throwTypes.Add(((DeclFunContext)_localctx)._stellatype);
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 100;
						Match(Surrogate_id_SYMB_0);
						State = 101;
						((DeclFunContext)_localctx)._stellatype = stellatype(0);
						((DeclFunContext)_localctx)._throwTypes.Add(((DeclFunContext)_localctx)._stellatype);
						}
						}
						State = 106;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 109;
				Match(Surrogate_id_SYMB_4);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Surrogate_id_SYMB_43 - 44)) | (1L << (Surrogate_id_SYMB_48 - 44)) | (1L << (Surrogate_id_SYMB_61 - 44)) | (1L << (EXCEPTION - 44)) | (1L << (GENERIC - 44)))) != 0)) {
					{
					{
					State = 110;
					((DeclFunContext)_localctx)._decl = decl();
					((DeclFunContext)_localctx)._localDecls.Add(((DeclFunContext)_localctx)._decl);
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 116;
				Match(Surrogate_id_SYMB_56);
				State = 117;
				((DeclFunContext)_localctx).returnExpr = expr(0);
				State = 118;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 2:
				_localctx = new DeclFunGenericContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_48) {
					{
					{
					State = 120;
					((DeclFunGenericContext)_localctx)._annotation = annotation();
					((DeclFunGenericContext)_localctx)._annotations.Add(((DeclFunGenericContext)_localctx)._annotation);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 126;
				Match(GENERIC);
				State = 127;
				Match(Surrogate_id_SYMB_43);
				State = 128;
				((DeclFunGenericContext)_localctx).name = Match(StellaIdent);
				State = 129;
				Match(Surrogate_id_SYMB_13);
				State = 130;
				((DeclFunGenericContext)_localctx)._StellaIdent = Match(StellaIdent);
				((DeclFunGenericContext)_localctx)._generics.Add(((DeclFunGenericContext)_localctx)._StellaIdent);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 131;
					Match(Surrogate_id_SYMB_0);
					State = 132;
					((DeclFunGenericContext)_localctx)._StellaIdent = Match(StellaIdent);
					((DeclFunGenericContext)_localctx)._generics.Add(((DeclFunGenericContext)_localctx)._StellaIdent);
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 138;
				Match(Surrogate_id_SYMB_14);
				State = 139;
				Match(Surrogate_id_SYMB_2);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StellaIdent) {
					{
					State = 140;
					((DeclFunGenericContext)_localctx)._paramDecl = paramDecl();
					((DeclFunGenericContext)_localctx)._paramDecls.Add(((DeclFunGenericContext)_localctx)._paramDecl);
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 141;
						Match(Surrogate_id_SYMB_0);
						State = 142;
						((DeclFunGenericContext)_localctx)._paramDecl = paramDecl();
						((DeclFunGenericContext)_localctx)._paramDecls.Add(((DeclFunGenericContext)_localctx)._paramDecl);
						}
						}
						State = 147;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 150;
				Match(Surrogate_id_SYMB_3);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_8) {
					{
					State = 151;
					Match(Surrogate_id_SYMB_8);
					State = 152;
					((DeclFunGenericContext)_localctx).returnType = stellatype(0);
					}
				}

				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_59) {
					{
					State = 155;
					Match(Surrogate_id_SYMB_59);
					State = 156;
					((DeclFunGenericContext)_localctx)._stellatype = stellatype(0);
					((DeclFunGenericContext)_localctx)._throwTypes.Add(((DeclFunGenericContext)_localctx)._stellatype);
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 157;
						Match(Surrogate_id_SYMB_0);
						State = 158;
						((DeclFunGenericContext)_localctx)._stellatype = stellatype(0);
						((DeclFunGenericContext)_localctx)._throwTypes.Add(((DeclFunGenericContext)_localctx)._stellatype);
						}
						}
						State = 163;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 166;
				Match(Surrogate_id_SYMB_4);
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Surrogate_id_SYMB_43 - 44)) | (1L << (Surrogate_id_SYMB_48 - 44)) | (1L << (Surrogate_id_SYMB_61 - 44)) | (1L << (EXCEPTION - 44)) | (1L << (GENERIC - 44)))) != 0)) {
					{
					{
					State = 167;
					((DeclFunGenericContext)_localctx)._decl = decl();
					((DeclFunGenericContext)_localctx)._localDecls.Add(((DeclFunGenericContext)_localctx)._decl);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 173;
				Match(Surrogate_id_SYMB_56);
				State = 174;
				((DeclFunGenericContext)_localctx).returnExpr = expr(0);
				State = 175;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 3:
				_localctx = new DeclTypeAliasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(Surrogate_id_SYMB_61);
				State = 178;
				((DeclTypeAliasContext)_localctx).name = Match(StellaIdent);
				State = 179;
				Match(Surrogate_id_SYMB_6);
				State = 180;
				((DeclTypeAliasContext)_localctx).atype = stellatype(0);
				}
				break;
			case 4:
				_localctx = new DeclExceptionTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				Match(EXCEPTION);
				State = 182;
				Match(Surrogate_id_SYMB_61);
				State = 183;
				Match(Surrogate_id_SYMB_6);
				State = 184;
				((DeclExceptionTypeContext)_localctx).exceptionType = stellatype(0);
				}
				break;
			case 5:
				_localctx = new DeclExceptionVariantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 185;
				Match(EXCEPTION);
				State = 186;
				Match(VARIANT);
				State = 187;
				((DeclExceptionVariantContext)_localctx).name = Match(StellaIdent);
				State = 188;
				Match(Surrogate_id_SYMB_7);
				State = 189;
				((DeclExceptionVariantContext)_localctx).variantType = stellatype(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
	 
		public AnnotationContext() { }
		public virtual void CopyFrom(AnnotationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InlineAnnotationContext : AnnotationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_48() { return GetToken(stellaParser.Surrogate_id_SYMB_48, 0); }
		public InlineAnnotationContext(AnnotationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		try {
			_localctx = new InlineAnnotationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(Surrogate_id_SYMB_48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamDeclContext : ParserRuleContext {
		public IToken name;
		public StellatypeContext paramType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_7() { return GetToken(stellaParser.Surrogate_id_SYMB_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public ParamDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamDeclContext paramDecl() {
		ParamDeclContext _localctx = new ParamDeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_paramDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_localctx.name = Match(StellaIdent);
			State = 195;
			Match(Surrogate_id_SYMB_7);
			State = 196;
			_localctx.paramType = stellatype(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoldContext : ExprContext {
		public StellatypeContext type_;
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_44() { return GetToken(stellaParser.Surrogate_id_SYMB_44, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FoldContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFold(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_21() { return GetToken(stellaParser.Surrogate_id_SYMB_21, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsZeroContext : ExprContext {
		public ExprContext n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_30() { return GetToken(stellaParser.Surrogate_id_SYMB_30, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsZeroContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsZero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExprContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		public VarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeAbstractionContext : ExprContext {
		public IToken _StellaIdent;
		public IList<IToken> _generics = new List<IToken>();
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(stellaParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StellaIdent() { return GetTokens(stellaParser.StellaIdent); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent(int i) {
			return GetToken(stellaParser.StellaIdent, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeAbstractionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAbstraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_24() { return GetToken(stellaParser.Surrogate_id_SYMB_24, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivideContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_15() { return GetToken(stellaParser.Surrogate_id_SYMB_15, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LessThanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotRecordContext : ExprContext {
		public ExprContext expr_;
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_25() { return GetToken(stellaParser.Surrogate_id_SYMB_25, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		public DotRecordContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_17() { return GetToken(stellaParser.Surrogate_id_SYMB_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GreaterThanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_19() { return GetToken(stellaParser.Surrogate_id_SYMB_19, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(stellaParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThrowContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_23() { return GetToken(stellaParser.Surrogate_id_SYMB_23, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplyContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstMemoryContext : ExprContext {
		public IToken mem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemoryAddress() { return GetToken(stellaParser.MemoryAddress, 0); }
		public ConstMemoryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstMemory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListContext : ExprContext {
		public ExprContext _expr;
		public IList<ExprContext> _exprs = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public ListContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryCatchContext : ExprContext {
		public ExprContext tryExpr;
		public PatternContext pat;
		public ExprContext fallbackExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(stellaParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_4() { return GetTokens(stellaParser.Surrogate_id_SYMB_4); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_4, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_5() { return GetTokens(stellaParser.Surrogate_id_SYMB_5); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_5, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(stellaParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(stellaParser.Surrogate_id_SYMB_9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public TryCatchContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HeadContext : ExprContext {
		public ExprContext list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_26() { return GetToken(stellaParser.Surrogate_id_SYMB_26, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HeadContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TerminatingSemicolonContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(stellaParser.Surrogate_id_SYMB_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TerminatingSemicolonContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminatingSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_20() { return GetToken(stellaParser.Surrogate_id_SYMB_20, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NotEqualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstUnitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_63() { return GetToken(stellaParser.Surrogate_id_SYMB_63, 0); }
		public ConstUnitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstUnit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SequenceContext : ExprContext {
		public ExprContext expr1;
		public ExprContext expr2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(stellaParser.Surrogate_id_SYMB_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SequenceContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstFalseContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_41() { return GetToken(stellaParser.Surrogate_id_SYMB_41, 0); }
		public ConstFalseContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbstractionContext : ExprContext {
		public ParamDeclContext _paramDecl;
		public IList<ParamDeclContext> _paramDecls = new List<ParamDeclContext>();
		public ExprContext returnExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_43() { return GetToken(stellaParser.Surrogate_id_SYMB_43, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_56() { return GetToken(stellaParser.Surrogate_id_SYMB_56, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext[] paramDecl() {
			return GetRuleContexts<ParamDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDeclContext paramDecl(int i) {
			return GetRuleContext<ParamDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public AbstractionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstIntContext : ExprContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(stellaParser.INTEGER, 0); }
		public ConstIntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariantContext : ExprContext {
		public IToken label;
		public ExprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_11() { return GetToken(stellaParser.Surrogate_id_SYMB_11, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_12() { return GetToken(stellaParser.Surrogate_id_SYMB_12, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariantContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstTrueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_60() { return GetToken(stellaParser.Surrogate_id_SYMB_60, 0); }
		public ConstTrueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_22() { return GetToken(stellaParser.Surrogate_id_SYMB_22, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SubtractContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeCastContext : ExprContext {
		public ExprContext expr_;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(stellaParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_36() { return GetToken(stellaParser.Surrogate_id_SYMB_36, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeCastContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		public ExprContext condition;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_45() { return GetToken(stellaParser.Surrogate_id_SYMB_45, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_58() { return GetToken(stellaParser.Surrogate_id_SYMB_58, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_39() { return GetToken(stellaParser.Surrogate_id_SYMB_39, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ApplicationContext : ExprContext {
		public ExprContext fun;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public ApplicationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DerefContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_23() { return GetToken(stellaParser.Surrogate_id_SYMB_23, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DerefContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeref(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsEmptyContext : ExprContext {
		public ExprContext list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_27() { return GetToken(stellaParser.Surrogate_id_SYMB_27, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsEmptyContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PanicContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PANIC() { return GetToken(stellaParser.PANIC, 0); }
		public PanicContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPanic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_16() { return GetToken(stellaParser.Surrogate_id_SYMB_16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LessThanOrEqualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuccContext : ExprContext {
		public ExprContext n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_57() { return GetToken(stellaParser.Surrogate_id_SYMB_57, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SuccContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSucc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_47() { return GetToken(stellaParser.Surrogate_id_SYMB_47, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InlContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_18() { return GetToken(stellaParser.Surrogate_id_SYMB_18, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GreaterThanOrEqualContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InrContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_49() { return GetToken(stellaParser.Surrogate_id_SYMB_49, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatchContext : ExprContext {
		public ExprContext expr_;
		public MatchCaseContext _matchCase;
		public IList<MatchCaseContext> _cases = new List<MatchCaseContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_53() { return GetToken(stellaParser.Surrogate_id_SYMB_53, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchCaseContext[] matchCase() {
			return GetRuleContexts<MatchCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchCaseContext matchCase(int i) {
			return GetRuleContext<MatchCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_10() { return GetTokens(stellaParser.Surrogate_id_SYMB_10); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_10(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_10, i);
		}
		public MatchContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicNotContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_54() { return GetToken(stellaParser.Surrogate_id_SYMB_54, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicNotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisedExprContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesisedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TailContext : ExprContext {
		public ExprContext list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_28() { return GetToken(stellaParser.Surrogate_id_SYMB_28, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TailContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTail(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordContext : ExprContext {
		public BindingContext _binding;
		public IList<BindingContext> _bindings = new List<BindingContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext[] binding() {
			return GetRuleContexts<BindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding(int i) {
			return GetRuleContext<BindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public RecordContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_35() { return GetToken(stellaParser.Surrogate_id_SYMB_35, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeApplicationContext : ExprContext {
		public ExprContext fun;
		public StellatypeContext _stellatype;
		public IList<StellatypeContext> _types = new List<StellatypeContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeApplicationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeApplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetRecContext : ExprContext {
		public PatternBindingContext _patternBinding;
		public IList<PatternBindingContext> _patternBindings = new List<PatternBindingContext>();
		public ExprContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_52() { return GetToken(stellaParser.Surrogate_id_SYMB_52, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_46() { return GetToken(stellaParser.Surrogate_id_SYMB_46, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternBindingContext[] patternBinding() {
			return GetRuleContexts<PatternBindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternBindingContext patternBinding(int i) {
			return GetRuleContext<PatternBindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public LetRecContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetRec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrContext : ExprContext {
		public ExprContext left;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_55() { return GetToken(stellaParser.Surrogate_id_SYMB_55, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryWithContext : ExprContext {
		public ExprContext tryExpr;
		public ExprContext fallbackExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(stellaParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_4() { return GetTokens(stellaParser.Surrogate_id_SYMB_4); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_4, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_5() { return GetTokens(stellaParser.Surrogate_id_SYMB_5); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_5, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_64() { return GetToken(stellaParser.Surrogate_id_SYMB_64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TryWithContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryWith(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredContext : ExprContext {
		public ExprContext n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_29() { return GetToken(stellaParser.Surrogate_id_SYMB_29, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PredContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPred(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeAscContext : ExprContext {
		public ExprContext expr_;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_36() { return GetToken(stellaParser.Surrogate_id_SYMB_36, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeAscContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAsc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NatRecContext : ExprContext {
		public ExprContext n;
		public ExprContext initial;
		public ExprContext step;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_31() { return GetToken(stellaParser.Surrogate_id_SYMB_31, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NatRecContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatRec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnfoldContext : ExprContext {
		public StellatypeContext type_;
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_62() { return GetToken(stellaParser.Surrogate_id_SYMB_62, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnfoldContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnfold(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RefContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(stellaParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RefContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotTupleContext : ExprContext {
		public ExprContext expr_;
		public IToken index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_25() { return GetToken(stellaParser.Surrogate_id_SYMB_25, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(stellaParser.INTEGER, 0); }
		public DotTupleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixContext : ExprContext {
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_42() { return GetToken(stellaParser.Surrogate_id_SYMB_42, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FixContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetContext : ExprContext {
		public PatternBindingContext _patternBinding;
		public IList<PatternBindingContext> _patternBindings = new List<PatternBindingContext>();
		public ExprContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_51() { return GetToken(stellaParser.Surrogate_id_SYMB_51, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_46() { return GetToken(stellaParser.Surrogate_id_SYMB_46, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternBindingContext[] patternBinding() {
			return GetRuleContexts<PatternBindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternBindingContext patternBinding(int i) {
			return GetRuleContext<PatternBindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public LetContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		public ExprContext lhs;
		public ExprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(stellaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleContext : ExprContext {
		public ExprContext _expr;
		public IList<ExprContext> _exprs = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TupleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConsListContext : ExprContext {
		public ExprContext head;
		public ExprContext tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_37() { return GetToken(stellaParser.Surrogate_id_SYMB_37, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0() { return GetToken(stellaParser.Surrogate_id_SYMB_0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConsListContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				_localctx = new ConstTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 199;
				Match(Surrogate_id_SYMB_60);
				}
				break;
			case 2:
				{
				_localctx = new ConstFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				Match(Surrogate_id_SYMB_41);
				}
				break;
			case 3:
				{
				_localctx = new ConstUnitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				Match(Surrogate_id_SYMB_63);
				}
				break;
			case 4:
				{
				_localctx = new ConstIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 202;
				((ConstIntContext)_localctx).n = Match(INTEGER);
				}
				break;
			case 5:
				{
				_localctx = new ConstMemoryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203;
				((ConstMemoryContext)_localctx).mem = Match(MemoryAddress);
				}
				break;
			case 6:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				((VarContext)_localctx).name = Match(StellaIdent);
				}
				break;
			case 7:
				{
				_localctx = new PanicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 205;
				Match(PANIC);
				}
				break;
			case 8:
				{
				_localctx = new ThrowContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206;
				Match(THROW);
				State = 207;
				Match(Surrogate_id_SYMB_2);
				State = 208;
				((ThrowContext)_localctx).expr_ = expr(0);
				State = 209;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 9:
				{
				_localctx = new TryCatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 211;
				Match(TRY);
				State = 212;
				Match(Surrogate_id_SYMB_4);
				State = 213;
				((TryCatchContext)_localctx).tryExpr = expr(0);
				State = 214;
				Match(Surrogate_id_SYMB_5);
				State = 215;
				Match(CATCH);
				State = 216;
				Match(Surrogate_id_SYMB_4);
				State = 217;
				((TryCatchContext)_localctx).pat = pattern(0);
				State = 218;
				Match(Surrogate_id_SYMB_9);
				State = 219;
				((TryCatchContext)_localctx).fallbackExpr = expr(0);
				State = 220;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 10:
				{
				_localctx = new TryWithContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(TRY);
				State = 223;
				Match(Surrogate_id_SYMB_4);
				State = 224;
				((TryWithContext)_localctx).tryExpr = expr(0);
				State = 225;
				Match(Surrogate_id_SYMB_5);
				State = 226;
				Match(Surrogate_id_SYMB_64);
				State = 227;
				Match(Surrogate_id_SYMB_4);
				State = 228;
				((TryWithContext)_localctx).fallbackExpr = expr(0);
				State = 229;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 11:
				{
				_localctx = new InlContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				Match(Surrogate_id_SYMB_47);
				State = 232;
				Match(Surrogate_id_SYMB_2);
				State = 233;
				((InlContext)_localctx).expr_ = expr(0);
				State = 234;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 12:
				{
				_localctx = new InrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(Surrogate_id_SYMB_49);
				State = 237;
				Match(Surrogate_id_SYMB_2);
				State = 238;
				((InrContext)_localctx).expr_ = expr(0);
				State = 239;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 13:
				{
				_localctx = new ConsListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241;
				Match(Surrogate_id_SYMB_37);
				State = 242;
				Match(Surrogate_id_SYMB_2);
				State = 243;
				((ConsListContext)_localctx).head = expr(0);
				State = 244;
				Match(Surrogate_id_SYMB_0);
				State = 245;
				((ConsListContext)_localctx).tail = expr(0);
				State = 246;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 14:
				{
				_localctx = new HeadContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(Surrogate_id_SYMB_26);
				State = 249;
				Match(Surrogate_id_SYMB_2);
				State = 250;
				((HeadContext)_localctx).list = expr(0);
				State = 251;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 15:
				{
				_localctx = new IsEmptyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253;
				Match(Surrogate_id_SYMB_27);
				State = 254;
				Match(Surrogate_id_SYMB_2);
				State = 255;
				((IsEmptyContext)_localctx).list = expr(0);
				State = 256;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 16:
				{
				_localctx = new TailContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258;
				Match(Surrogate_id_SYMB_28);
				State = 259;
				Match(Surrogate_id_SYMB_2);
				State = 260;
				((TailContext)_localctx).list = expr(0);
				State = 261;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 17:
				{
				_localctx = new SuccContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263;
				Match(Surrogate_id_SYMB_57);
				State = 264;
				Match(Surrogate_id_SYMB_2);
				State = 265;
				((SuccContext)_localctx).n = expr(0);
				State = 266;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 18:
				{
				_localctx = new LogicNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268;
				Match(Surrogate_id_SYMB_54);
				State = 269;
				Match(Surrogate_id_SYMB_2);
				State = 270;
				((LogicNotContext)_localctx).expr_ = expr(0);
				State = 271;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 19:
				{
				_localctx = new PredContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 273;
				Match(Surrogate_id_SYMB_29);
				State = 274;
				Match(Surrogate_id_SYMB_2);
				State = 275;
				((PredContext)_localctx).n = expr(0);
				State = 276;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 20:
				{
				_localctx = new IsZeroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278;
				Match(Surrogate_id_SYMB_30);
				State = 279;
				Match(Surrogate_id_SYMB_2);
				State = 280;
				((IsZeroContext)_localctx).n = expr(0);
				State = 281;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 21:
				{
				_localctx = new FixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283;
				Match(Surrogate_id_SYMB_42);
				State = 284;
				Match(Surrogate_id_SYMB_2);
				State = 285;
				((FixContext)_localctx).expr_ = expr(0);
				State = 286;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 22:
				{
				_localctx = new NatRecContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				Match(Surrogate_id_SYMB_31);
				State = 289;
				Match(Surrogate_id_SYMB_2);
				State = 290;
				((NatRecContext)_localctx).n = expr(0);
				State = 291;
				Match(Surrogate_id_SYMB_0);
				State = 292;
				((NatRecContext)_localctx).initial = expr(0);
				State = 293;
				Match(Surrogate_id_SYMB_0);
				State = 294;
				((NatRecContext)_localctx).step = expr(0);
				State = 295;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 23:
				{
				_localctx = new FoldContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				Match(Surrogate_id_SYMB_44);
				State = 298;
				Match(Surrogate_id_SYMB_13);
				State = 299;
				((FoldContext)_localctx).type_ = stellatype(0);
				State = 300;
				Match(Surrogate_id_SYMB_14);
				State = 301;
				((FoldContext)_localctx).expr_ = expr(34);
				}
				break;
			case 24:
				{
				_localctx = new UnfoldContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 303;
				Match(Surrogate_id_SYMB_62);
				State = 304;
				Match(Surrogate_id_SYMB_13);
				State = 305;
				((UnfoldContext)_localctx).type_ = stellatype(0);
				State = 306;
				Match(Surrogate_id_SYMB_14);
				State = 307;
				((UnfoldContext)_localctx).expr_ = expr(33);
				}
				break;
			case 25:
				{
				_localctx = new RefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 309;
				Match(REFERENCE);
				State = 310;
				((RefContext)_localctx).expr_ = expr(27);
				}
				break;
			case 26:
				{
				_localctx = new DerefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 311;
				Match(Surrogate_id_SYMB_23);
				State = 312;
				((DerefContext)_localctx).expr_ = expr(26);
				}
				break;
			case 27:
				{
				_localctx = new AbstractionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313;
				Match(Surrogate_id_SYMB_43);
				State = 314;
				Match(Surrogate_id_SYMB_2);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StellaIdent) {
					{
					State = 315;
					((AbstractionContext)_localctx)._paramDecl = paramDecl();
					((AbstractionContext)_localctx)._paramDecls.Add(((AbstractionContext)_localctx)._paramDecl);
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 316;
						Match(Surrogate_id_SYMB_0);
						State = 317;
						((AbstractionContext)_localctx)._paramDecl = paramDecl();
						((AbstractionContext)_localctx)._paramDecls.Add(((AbstractionContext)_localctx)._paramDecl);
						}
						}
						State = 322;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 325;
				Match(Surrogate_id_SYMB_3);
				State = 326;
				Match(Surrogate_id_SYMB_4);
				State = 327;
				Match(Surrogate_id_SYMB_56);
				State = 328;
				((AbstractionContext)_localctx).returnExpr = expr(0);
				State = 329;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 28:
				{
				_localctx = new TupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 331;
				Match(Surrogate_id_SYMB_4);
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_23) | (1L << Surrogate_id_SYMB_26) | (1L << Surrogate_id_SYMB_27) | (1L << Surrogate_id_SYMB_28) | (1L << Surrogate_id_SYMB_29) | (1L << Surrogate_id_SYMB_30) | (1L << Surrogate_id_SYMB_31) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_42) | (1L << Surrogate_id_SYMB_43) | (1L << Surrogate_id_SYMB_44) | (1L << Surrogate_id_SYMB_45) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_51) | (1L << Surrogate_id_SYMB_52) | (1L << Surrogate_id_SYMB_53) | (1L << Surrogate_id_SYMB_54) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60) | (1L << Surrogate_id_SYMB_62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (REFERENCE - 64)) | (1L << (PANIC - 64)) | (1L << (THROW - 64)) | (1L << (TRY - 64)) | (1L << (GENERIC - 64)) | (1L << (StellaIdent - 64)) | (1L << (MemoryAddress - 64)) | (1L << (INTEGER - 64)))) != 0)) {
					{
					State = 332;
					((TupleContext)_localctx)._expr = expr(0);
					((TupleContext)_localctx)._exprs.Add(((TupleContext)_localctx)._expr);
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 333;
						Match(Surrogate_id_SYMB_0);
						State = 334;
						((TupleContext)_localctx)._expr = expr(0);
						((TupleContext)_localctx)._exprs.Add(((TupleContext)_localctx)._expr);
						}
						}
						State = 339;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 342;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 29:
				{
				_localctx = new RecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 343;
				Match(Surrogate_id_SYMB_4);
				State = 344;
				((RecordContext)_localctx)._binding = binding();
				((RecordContext)_localctx)._bindings.Add(((RecordContext)_localctx)._binding);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 345;
					Match(Surrogate_id_SYMB_0);
					State = 346;
					((RecordContext)_localctx)._binding = binding();
					((RecordContext)_localctx)._bindings.Add(((RecordContext)_localctx)._binding);
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 352;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 30:
				{
				_localctx = new VariantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				Match(Surrogate_id_SYMB_11);
				State = 355;
				((VariantContext)_localctx).label = Match(StellaIdent);
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_6) {
					{
					State = 356;
					Match(Surrogate_id_SYMB_6);
					State = 357;
					((VariantContext)_localctx).rhs = expr(0);
					}
				}

				State = 360;
				Match(Surrogate_id_SYMB_12);
				}
				break;
			case 31:
				{
				_localctx = new MatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(Surrogate_id_SYMB_53);
				State = 362;
				((MatchContext)_localctx).expr_ = expr(0);
				State = 363;
				Match(Surrogate_id_SYMB_4);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (StellaIdent - 64)) | (1L << (INTEGER - 64)))) != 0)) {
					{
					State = 364;
					((MatchContext)_localctx)._matchCase = matchCase();
					((MatchContext)_localctx)._cases.Add(((MatchContext)_localctx)._matchCase);
					State = 369;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_10) {
						{
						{
						State = 365;
						Match(Surrogate_id_SYMB_10);
						State = 366;
						((MatchContext)_localctx)._matchCase = matchCase();
						((MatchContext)_localctx)._cases.Add(((MatchContext)_localctx)._matchCase);
						}
						}
						State = 371;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 374;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 32:
				{
				_localctx = new ListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(Surrogate_id_SYMB_13);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_23) | (1L << Surrogate_id_SYMB_26) | (1L << Surrogate_id_SYMB_27) | (1L << Surrogate_id_SYMB_28) | (1L << Surrogate_id_SYMB_29) | (1L << Surrogate_id_SYMB_30) | (1L << Surrogate_id_SYMB_31) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_42) | (1L << Surrogate_id_SYMB_43) | (1L << Surrogate_id_SYMB_44) | (1L << Surrogate_id_SYMB_45) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_51) | (1L << Surrogate_id_SYMB_52) | (1L << Surrogate_id_SYMB_53) | (1L << Surrogate_id_SYMB_54) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60) | (1L << Surrogate_id_SYMB_62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (REFERENCE - 64)) | (1L << (PANIC - 64)) | (1L << (THROW - 64)) | (1L << (TRY - 64)) | (1L << (GENERIC - 64)) | (1L << (StellaIdent - 64)) | (1L << (MemoryAddress - 64)) | (1L << (INTEGER - 64)))) != 0)) {
					{
					State = 377;
					((ListContext)_localctx)._expr = expr(0);
					((ListContext)_localctx)._exprs.Add(((ListContext)_localctx)._expr);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 378;
						Match(Surrogate_id_SYMB_0);
						State = 379;
						((ListContext)_localctx)._expr = expr(0);
						((ListContext)_localctx)._exprs.Add(((ListContext)_localctx)._expr);
						}
						}
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 387;
				Match(Surrogate_id_SYMB_14);
				}
				break;
			case 33:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 388;
				Match(Surrogate_id_SYMB_45);
				State = 389;
				((IfContext)_localctx).condition = expr(0);
				State = 390;
				Match(Surrogate_id_SYMB_58);
				State = 391;
				((IfContext)_localctx).thenExpr = expr(0);
				State = 392;
				Match(Surrogate_id_SYMB_39);
				State = 393;
				((IfContext)_localctx).elseExpr = expr(7);
				}
				break;
			case 34:
				{
				_localctx = new LetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395;
				Match(Surrogate_id_SYMB_51);
				State = 396;
				((LetContext)_localctx)._patternBinding = patternBinding();
				((LetContext)_localctx)._patternBindings.Add(((LetContext)_localctx)._patternBinding);
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 397;
					Match(Surrogate_id_SYMB_0);
					State = 398;
					((LetContext)_localctx)._patternBinding = patternBinding();
					((LetContext)_localctx)._patternBindings.Add(((LetContext)_localctx)._patternBinding);
					}
					}
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 404;
				Match(Surrogate_id_SYMB_46);
				State = 405;
				((LetContext)_localctx).body = expr(5);
				}
				break;
			case 35:
				{
				_localctx = new LetRecContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407;
				Match(Surrogate_id_SYMB_52);
				State = 408;
				((LetRecContext)_localctx)._patternBinding = patternBinding();
				((LetRecContext)_localctx)._patternBindings.Add(((LetRecContext)_localctx)._patternBinding);
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 409;
					Match(Surrogate_id_SYMB_0);
					State = 410;
					((LetRecContext)_localctx)._patternBinding = patternBinding();
					((LetRecContext)_localctx)._patternBindings.Add(((LetRecContext)_localctx)._patternBinding);
					}
					}
					State = 415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 416;
				Match(Surrogate_id_SYMB_46);
				State = 417;
				((LetRecContext)_localctx).body = expr(4);
				}
				break;
			case 36:
				{
				_localctx = new TypeAbstractionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 419;
				Match(GENERIC);
				State = 420;
				Match(Surrogate_id_SYMB_13);
				State = 421;
				((TypeAbstractionContext)_localctx)._StellaIdent = Match(StellaIdent);
				((TypeAbstractionContext)_localctx)._generics.Add(((TypeAbstractionContext)_localctx)._StellaIdent);
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 422;
					Match(Surrogate_id_SYMB_0);
					State = 423;
					((TypeAbstractionContext)_localctx)._StellaIdent = Match(StellaIdent);
					((TypeAbstractionContext)_localctx)._generics.Add(((TypeAbstractionContext)_localctx)._StellaIdent);
					}
					}
					State = 428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 429;
				Match(Surrogate_id_SYMB_14);
				State = 430;
				((TypeAbstractionContext)_localctx).expr_ = expr(3);
				}
				break;
			case 37:
				{
				_localctx = new ParenthesisedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 431;
				Match(Surrogate_id_SYMB_2);
				State = 432;
				((ParenthesisedExprContext)_localctx).expr_ = expr(0);
				State = 433;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 519;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new MultiplyContext(new ExprContext(_parentctx, _parentState));
						((MultiplyContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 437;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 438;
						Match(Surrogate_id_SYMB_23);
						State = 439;
						((MultiplyContext)_localctx).right = expr(31);
						}
						break;
					case 2:
						{
						_localctx = new DivideContext(new ExprContext(_parentctx, _parentState));
						((DivideContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 440;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 441;
						Match(Surrogate_id_SYMB_24);
						State = 442;
						((DivideContext)_localctx).right = expr(30);
						}
						break;
					case 3:
						{
						_localctx = new LogicAndContext(new ExprContext(_parentctx, _parentState));
						((LogicAndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 443;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 444;
						Match(Surrogate_id_SYMB_35);
						State = 445;
						((LogicAndContext)_localctx).right = expr(29);
						}
						break;
					case 4:
						{
						_localctx = new AddContext(new ExprContext(_parentctx, _parentState));
						((AddContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 446;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 447;
						Match(Surrogate_id_SYMB_21);
						State = 448;
						((AddContext)_localctx).right = expr(26);
						}
						break;
					case 5:
						{
						_localctx = new SubtractContext(new ExprContext(_parentctx, _parentState));
						((SubtractContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 449;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 450;
						Match(Surrogate_id_SYMB_22);
						State = 451;
						((SubtractContext)_localctx).right = expr(25);
						}
						break;
					case 6:
						{
						_localctx = new LogicOrContext(new ExprContext(_parentctx, _parentState));
						((LogicOrContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 452;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 453;
						Match(Surrogate_id_SYMB_55);
						State = 454;
						((LogicOrContext)_localctx).right = expr(24);
						}
						break;
					case 7:
						{
						_localctx = new LessThanContext(new ExprContext(_parentctx, _parentState));
						((LessThanContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 455;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 456;
						Match(Surrogate_id_SYMB_15);
						State = 457;
						((LessThanContext)_localctx).right = expr(15);
						}
						break;
					case 8:
						{
						_localctx = new LessThanOrEqualContext(new ExprContext(_parentctx, _parentState));
						((LessThanOrEqualContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 458;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 459;
						Match(Surrogate_id_SYMB_16);
						State = 460;
						((LessThanOrEqualContext)_localctx).right = expr(14);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanContext(new ExprContext(_parentctx, _parentState));
						((GreaterThanContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 461;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 462;
						Match(Surrogate_id_SYMB_17);
						State = 463;
						((GreaterThanContext)_localctx).right = expr(13);
						}
						break;
					case 10:
						{
						_localctx = new GreaterThanOrEqualContext(new ExprContext(_parentctx, _parentState));
						((GreaterThanOrEqualContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 464;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 465;
						Match(Surrogate_id_SYMB_18);
						State = 466;
						((GreaterThanOrEqualContext)_localctx).right = expr(12);
						}
						break;
					case 11:
						{
						_localctx = new EqualContext(new ExprContext(_parentctx, _parentState));
						((EqualContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 467;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 468;
						Match(Surrogate_id_SYMB_19);
						State = 469;
						((EqualContext)_localctx).right = expr(11);
						}
						break;
					case 12:
						{
						_localctx = new NotEqualContext(new ExprContext(_parentctx, _parentState));
						((NotEqualContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 470;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 471;
						Match(Surrogate_id_SYMB_20);
						State = 472;
						((NotEqualContext)_localctx).right = expr(10);
						}
						break;
					case 13:
						{
						_localctx = new AssignContext(new ExprContext(_parentctx, _parentState));
						((AssignContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 473;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 474;
						Match(ASSIGN);
						State = 475;
						((AssignContext)_localctx).rhs = expr(9);
						}
						break;
					case 14:
						{
						_localctx = new SequenceContext(new ExprContext(_parentctx, _parentState));
						((SequenceContext)_localctx).expr1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 476;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 477;
						Match(Surrogate_id_SYMB_1);
						State = 478;
						((SequenceContext)_localctx).expr2 = expr(7);
						}
						break;
					case 15:
						{
						_localctx = new DotRecordContext(new ExprContext(_parentctx, _parentState));
						((DotRecordContext)_localctx).expr_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 479;
						if (!(Precpred(Context, 58))) throw new FailedPredicateException(this, "Precpred(Context, 58)");
						State = 480;
						Match(Surrogate_id_SYMB_25);
						State = 481;
						((DotRecordContext)_localctx).label = Match(StellaIdent);
						}
						break;
					case 16:
						{
						_localctx = new DotTupleContext(new ExprContext(_parentctx, _parentState));
						((DotTupleContext)_localctx).expr_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 482;
						if (!(Precpred(Context, 57))) throw new FailedPredicateException(this, "Precpred(Context, 57)");
						State = 483;
						Match(Surrogate_id_SYMB_25);
						State = 484;
						((DotTupleContext)_localctx).index = Match(INTEGER);
						}
						break;
					case 17:
						{
						_localctx = new ApplicationContext(new ExprContext(_parentctx, _parentState));
						((ApplicationContext)_localctx).fun = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 485;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 486;
						Match(Surrogate_id_SYMB_2);
						State = 495;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_23) | (1L << Surrogate_id_SYMB_26) | (1L << Surrogate_id_SYMB_27) | (1L << Surrogate_id_SYMB_28) | (1L << Surrogate_id_SYMB_29) | (1L << Surrogate_id_SYMB_30) | (1L << Surrogate_id_SYMB_31) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_42) | (1L << Surrogate_id_SYMB_43) | (1L << Surrogate_id_SYMB_44) | (1L << Surrogate_id_SYMB_45) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_51) | (1L << Surrogate_id_SYMB_52) | (1L << Surrogate_id_SYMB_53) | (1L << Surrogate_id_SYMB_54) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60) | (1L << Surrogate_id_SYMB_62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (REFERENCE - 64)) | (1L << (PANIC - 64)) | (1L << (THROW - 64)) | (1L << (TRY - 64)) | (1L << (GENERIC - 64)) | (1L << (StellaIdent - 64)) | (1L << (MemoryAddress - 64)) | (1L << (INTEGER - 64)))) != 0)) {
							{
							State = 487;
							((ApplicationContext)_localctx)._expr = expr(0);
							((ApplicationContext)_localctx)._args.Add(((ApplicationContext)_localctx)._expr);
							State = 492;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==Surrogate_id_SYMB_0) {
								{
								{
								State = 488;
								Match(Surrogate_id_SYMB_0);
								State = 489;
								((ApplicationContext)_localctx)._expr = expr(0);
								((ApplicationContext)_localctx)._args.Add(((ApplicationContext)_localctx)._expr);
								}
								}
								State = 494;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 497;
						Match(Surrogate_id_SYMB_3);
						}
						break;
					case 18:
						{
						_localctx = new TypeApplicationContext(new ExprContext(_parentctx, _parentState));
						((TypeApplicationContext)_localctx).fun = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 498;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 499;
						Match(Surrogate_id_SYMB_13);
						{
						State = 500;
						((TypeApplicationContext)_localctx)._stellatype = stellatype(0);
						((TypeApplicationContext)_localctx)._types.Add(((TypeApplicationContext)_localctx)._stellatype);
						State = 505;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Surrogate_id_SYMB_0) {
							{
							{
							State = 501;
							Match(Surrogate_id_SYMB_0);
							State = 502;
							((TypeApplicationContext)_localctx)._stellatype = stellatype(0);
							((TypeApplicationContext)_localctx)._types.Add(((TypeApplicationContext)_localctx)._stellatype);
							}
							}
							State = 507;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						State = 508;
						Match(Surrogate_id_SYMB_14);
						}
						break;
					case 19:
						{
						_localctx = new TypeAscContext(new ExprContext(_parentctx, _parentState));
						((TypeAscContext)_localctx).expr_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 510;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 511;
						Match(Surrogate_id_SYMB_36);
						State = 512;
						((TypeAscContext)_localctx).type_ = stellatype(0);
						}
						break;
					case 20:
						{
						_localctx = new TypeCastContext(new ExprContext(_parentctx, _parentState));
						((TypeCastContext)_localctx).expr_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 513;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 514;
						Match(CAST);
						State = 515;
						Match(Surrogate_id_SYMB_36);
						State = 516;
						((TypeCastContext)_localctx).type_ = stellatype(0);
						}
						break;
					case 21:
						{
						_localctx = new TerminatingSemicolonContext(new ExprContext(_parentctx, _parentState));
						((TerminatingSemicolonContext)_localctx).expr_ = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 517;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 518;
						Match(Surrogate_id_SYMB_1);
						}
						break;
					}
					} 
				}
				State = 523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PatternBindingContext : ParserRuleContext {
		public PatternContext pat;
		public ExprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PatternBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternBindingContext patternBinding() {
		PatternBindingContext _localctx = new PatternBindingContext(Context, State);
		EnterRule(_localctx, 20, RULE_patternBinding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_localctx.pat = pattern(0);
			State = 525;
			Match(Surrogate_id_SYMB_6);
			State = 526;
			_localctx.rhs = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		public IToken name;
		public ExprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 22, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_localctx.name = Match(StellaIdent);
			State = 529;
			Match(Surrogate_id_SYMB_6);
			State = 530;
			_localctx.rhs = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchCaseContext : ParserRuleContext {
		public PatternContext pattern_;
		public ExprContext expr_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(stellaParser.Surrogate_id_SYMB_9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MatchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchCaseContext matchCase() {
		MatchCaseContext _localctx = new MatchCaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_matchCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			_localctx.pattern_ = pattern(0);
			State = 533;
			Match(Surrogate_id_SYMB_9);
			State = 534;
			_localctx.expr_ = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
	 
		public PatternContext() { }
		public virtual void CopyFrom(PatternContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PatternConsContext : PatternContext {
		public PatternContext head;
		public PatternContext tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_37() { return GetToken(stellaParser.Surrogate_id_SYMB_37, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0() { return GetToken(stellaParser.Surrogate_id_SYMB_0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public PatternConsContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternCons(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternTupleContext : PatternContext {
		public PatternContext _pattern;
		public IList<PatternContext> _patterns = new List<PatternContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public PatternTupleContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternListContext : PatternContext {
		public PatternContext _pattern;
		public IList<PatternContext> _patterns = new List<PatternContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public PatternListContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternRecordContext : PatternContext {
		public LabelledPatternContext _labelledPattern;
		public IList<LabelledPatternContext> _patterns = new List<LabelledPatternContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelledPatternContext[] labelledPattern() {
			return GetRuleContexts<LabelledPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledPatternContext labelledPattern(int i) {
			return GetRuleContext<LabelledPatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public PatternRecordContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternVariantContext : PatternContext {
		public IToken label;
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_11() { return GetToken(stellaParser.Surrogate_id_SYMB_11, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_12() { return GetToken(stellaParser.Surrogate_id_SYMB_12, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternVariantContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternVariant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternAscContext : PatternContext {
		public PatternContext pattern_;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_36() { return GetToken(stellaParser.Surrogate_id_SYMB_36, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public PatternAscContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternAsc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternIntContext : PatternContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(stellaParser.INTEGER, 0); }
		public PatternIntContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternInrContext : PatternContext {
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_49() { return GetToken(stellaParser.Surrogate_id_SYMB_49, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternInrContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternInr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternTrueContext : PatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_60() { return GetToken(stellaParser.Surrogate_id_SYMB_60, 0); }
		public PatternTrueContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternInlContext : PatternContext {
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_47() { return GetToken(stellaParser.Surrogate_id_SYMB_47, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternInlContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternInl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternVarContext : PatternContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		public PatternVarContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisedPatternContext : PatternContext {
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ParenthesisedPatternContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternSuccContext : PatternContext {
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_57() { return GetToken(stellaParser.Surrogate_id_SYMB_57, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternSuccContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternSucc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternFalseContext : PatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_41() { return GetToken(stellaParser.Surrogate_id_SYMB_41, 0); }
		public PatternFalseContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PatternUnitContext : PatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_63() { return GetToken(stellaParser.Surrogate_id_SYMB_63, 0); }
		public PatternUnitContext(PatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		return pattern(0);
	}

	private PatternContext pattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PatternContext _localctx = new PatternContext(Context, _parentState);
		PatternContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_pattern, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new PatternVariantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 537;
				Match(Surrogate_id_SYMB_11);
				State = 538;
				((PatternVariantContext)_localctx).label = Match(StellaIdent);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Surrogate_id_SYMB_6) {
					{
					State = 539;
					Match(Surrogate_id_SYMB_6);
					State = 540;
					((PatternVariantContext)_localctx).pattern_ = pattern(0);
					}
				}

				State = 543;
				Match(Surrogate_id_SYMB_12);
				}
				break;
			case 2:
				{
				_localctx = new PatternInlContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 544;
				Match(Surrogate_id_SYMB_47);
				State = 545;
				Match(Surrogate_id_SYMB_2);
				State = 546;
				((PatternInlContext)_localctx).pattern_ = pattern(0);
				State = 547;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 3:
				{
				_localctx = new PatternInrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 549;
				Match(Surrogate_id_SYMB_49);
				State = 550;
				Match(Surrogate_id_SYMB_2);
				State = 551;
				((PatternInrContext)_localctx).pattern_ = pattern(0);
				State = 552;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 4:
				{
				_localctx = new PatternTupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 554;
				Match(Surrogate_id_SYMB_4);
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (StellaIdent - 64)) | (1L << (INTEGER - 64)))) != 0)) {
					{
					State = 555;
					((PatternTupleContext)_localctx)._pattern = pattern(0);
					((PatternTupleContext)_localctx)._patterns.Add(((PatternTupleContext)_localctx)._pattern);
					State = 560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 556;
						Match(Surrogate_id_SYMB_0);
						State = 557;
						((PatternTupleContext)_localctx)._pattern = pattern(0);
						((PatternTupleContext)_localctx)._patterns.Add(((PatternTupleContext)_localctx)._pattern);
						}
						}
						State = 562;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 565;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 5:
				{
				_localctx = new PatternRecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 566;
				Match(Surrogate_id_SYMB_4);
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StellaIdent) {
					{
					State = 567;
					((PatternRecordContext)_localctx)._labelledPattern = labelledPattern();
					((PatternRecordContext)_localctx)._patterns.Add(((PatternRecordContext)_localctx)._labelledPattern);
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 568;
						Match(Surrogate_id_SYMB_0);
						State = 569;
						((PatternRecordContext)_localctx)._labelledPattern = labelledPattern();
						((PatternRecordContext)_localctx)._patterns.Add(((PatternRecordContext)_localctx)._labelledPattern);
						}
						}
						State = 574;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 577;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 6:
				{
				_localctx = new PatternListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 578;
				Match(Surrogate_id_SYMB_13);
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_37) | (1L << Surrogate_id_SYMB_41) | (1L << Surrogate_id_SYMB_47) | (1L << Surrogate_id_SYMB_49) | (1L << Surrogate_id_SYMB_57) | (1L << Surrogate_id_SYMB_60))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Surrogate_id_SYMB_63 - 64)) | (1L << (StellaIdent - 64)) | (1L << (INTEGER - 64)))) != 0)) {
					{
					State = 579;
					((PatternListContext)_localctx)._pattern = pattern(0);
					((PatternListContext)_localctx)._patterns.Add(((PatternListContext)_localctx)._pattern);
					State = 584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 580;
						Match(Surrogate_id_SYMB_0);
						State = 581;
						((PatternListContext)_localctx)._pattern = pattern(0);
						((PatternListContext)_localctx)._patterns.Add(((PatternListContext)_localctx)._pattern);
						}
						}
						State = 586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 589;
				Match(Surrogate_id_SYMB_14);
				}
				break;
			case 7:
				{
				_localctx = new PatternConsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 590;
				Match(Surrogate_id_SYMB_37);
				State = 591;
				Match(Surrogate_id_SYMB_2);
				State = 592;
				((PatternConsContext)_localctx).head = pattern(0);
				State = 593;
				Match(Surrogate_id_SYMB_0);
				State = 594;
				((PatternConsContext)_localctx).tail = pattern(0);
				State = 595;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 8:
				{
				_localctx = new PatternFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 597;
				Match(Surrogate_id_SYMB_41);
				}
				break;
			case 9:
				{
				_localctx = new PatternTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 598;
				Match(Surrogate_id_SYMB_60);
				}
				break;
			case 10:
				{
				_localctx = new PatternUnitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 599;
				Match(Surrogate_id_SYMB_63);
				}
				break;
			case 11:
				{
				_localctx = new PatternIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 600;
				((PatternIntContext)_localctx).n = Match(INTEGER);
				}
				break;
			case 12:
				{
				_localctx = new PatternSuccContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 601;
				Match(Surrogate_id_SYMB_57);
				State = 602;
				Match(Surrogate_id_SYMB_2);
				State = 603;
				((PatternSuccContext)_localctx).pattern_ = pattern(0);
				State = 604;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			case 13:
				{
				_localctx = new PatternVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 606;
				((PatternVarContext)_localctx).name = Match(StellaIdent);
				}
				break;
			case 14:
				{
				_localctx = new ParenthesisedPatternContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 607;
				Match(Surrogate_id_SYMB_2);
				State = 608;
				((ParenthesisedPatternContext)_localctx).pattern_ = pattern(0);
				State = 609;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PatternAscContext(new PatternContext(_parentctx, _parentState));
					((PatternAscContext)_localctx).pattern_ = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_pattern);
					State = 613;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 614;
					Match(Surrogate_id_SYMB_36);
					State = 615;
					((PatternAscContext)_localctx).type_ = stellatype(0);
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LabelledPatternContext : ParserRuleContext {
		public IToken label;
		public PatternContext pattern_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(stellaParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public LabelledPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledPatternContext labelledPattern() {
		LabelledPatternContext _localctx = new LabelledPatternContext(Context, State);
		EnterRule(_localctx, 28, RULE_labelledPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			_localctx.label = Match(StellaIdent);
			State = 622;
			Match(Surrogate_id_SYMB_6);
			State = 623;
			_localctx.pattern_ = pattern(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StellatypeContext : ParserRuleContext {
		public StellatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stellatype; } }
	 
		public StellatypeContext() { }
		public virtual void CopyFrom(StellatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeTupleContext : StellatypeContext {
		public StellatypeContext _stellatype;
		public IList<StellatypeContext> _types = new List<StellatypeContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeTupleContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeTopContext : StellatypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP_TYPE() { return GetToken(stellaParser.TOP_TYPE, 0); }
		public TypeTopContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeBoolContext : StellatypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_32() { return GetToken(stellaParser.Surrogate_id_SYMB_32, 0); }
		public TypeBoolContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeRefContext : StellatypeContext {
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_TYPE() { return GetToken(stellaParser.REF_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeRefContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeRecContext : StellatypeContext {
		public IToken var;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_65() { return GetToken(stellaParser.Surrogate_id_SYMB_65, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_25() { return GetToken(stellaParser.Surrogate_id_SYMB_25, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeRecContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeSumContext : StellatypeContext {
		public StellatypeContext left;
		public StellatypeContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_21() { return GetToken(stellaParser.Surrogate_id_SYMB_21, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		public TypeSumContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeVarContext : StellatypeContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		public TypeVarContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeVariantContext : StellatypeContext {
		public VariantFieldTypeContext _variantFieldType;
		public IList<VariantFieldTypeContext> _fieldTypes = new List<VariantFieldTypeContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_11() { return GetToken(stellaParser.Surrogate_id_SYMB_11, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_12() { return GetToken(stellaParser.Surrogate_id_SYMB_12, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantFieldTypeContext[] variantFieldType() {
			return GetRuleContexts<VariantFieldTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantFieldTypeContext variantFieldType(int i) {
			return GetRuleContext<VariantFieldTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeVariantContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVariant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeUnitContext : StellatypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_34() { return GetToken(stellaParser.Surrogate_id_SYMB_34, 0); }
		public TypeUnitContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeUnit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeNatContext : StellatypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_33() { return GetToken(stellaParser.Surrogate_id_SYMB_33, 0); }
		public TypeNatContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeBottomContext : StellatypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTTOM_TYPE() { return GetToken(stellaParser.BOTTOM_TYPE, 0); }
		public TypeBottomContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBottom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeParensContext : StellatypeContext {
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeParensContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeFunContext : StellatypeContext {
		public StellatypeContext _stellatype;
		public IList<StellatypeContext> _paramTypes = new List<StellatypeContext>();
		public StellatypeContext returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_43() { return GetToken(stellaParser.Surrogate_id_SYMB_43, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(stellaParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(stellaParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(stellaParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext[] stellatype() {
			return GetRuleContexts<StellatypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype(int i) {
			return GetRuleContext<StellatypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeFunContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFun(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeForAllContext : StellatypeContext {
		public IToken _StellaIdent;
		public IList<IToken> _types = new List<IToken>();
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(stellaParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_25() { return GetToken(stellaParser.Surrogate_id_SYMB_25, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StellaIdent() { return GetTokens(stellaParser.StellaIdent); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent(int i) {
			return GetToken(stellaParser.StellaIdent, i);
		}
		public TypeForAllContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeForAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeRecordContext : StellatypeContext {
		public RecordFieldTypeContext _recordFieldType;
		public IList<RecordFieldTypeContext> _fieldTypes = new List<RecordFieldTypeContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(stellaParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(stellaParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordFieldTypeContext[] recordFieldType() {
			return GetRuleContexts<RecordFieldTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordFieldTypeContext recordFieldType(int i) {
			return GetRuleContext<RecordFieldTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_0() { return GetTokens(stellaParser.Surrogate_id_SYMB_0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0(int i) {
			return GetToken(stellaParser.Surrogate_id_SYMB_0, i);
		}
		public TypeRecordContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeListContext : StellatypeContext {
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(stellaParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(stellaParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public TypeListContext(StellatypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StellatypeContext stellatype() {
		return stellatype(0);
	}

	private StellatypeContext stellatype(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StellatypeContext _localctx = new StellatypeContext(Context, _parentState);
		StellatypeContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_stellatype, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				_localctx = new TypeBoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 626;
				Match(Surrogate_id_SYMB_32);
				}
				break;
			case 2:
				{
				_localctx = new TypeNatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 627;
				Match(Surrogate_id_SYMB_33);
				}
				break;
			case 3:
				{
				_localctx = new TypeRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 628;
				Match(REF_TYPE);
				State = 629;
				((TypeRefContext)_localctx).type_ = stellatype(14);
				}
				break;
			case 4:
				{
				_localctx = new TypeFunContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 630;
				Match(Surrogate_id_SYMB_43);
				State = 631;
				Match(Surrogate_id_SYMB_2);
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_32) | (1L << Surrogate_id_SYMB_33) | (1L << Surrogate_id_SYMB_34) | (1L << Surrogate_id_SYMB_43))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Surrogate_id_SYMB_65 - 66)) | (1L << (REF_TYPE - 66)) | (1L << (TOP_TYPE - 66)) | (1L << (BOTTOM_TYPE - 66)) | (1L << (FORALL - 66)) | (1L << (StellaIdent - 66)))) != 0)) {
					{
					State = 632;
					((TypeFunContext)_localctx)._stellatype = stellatype(0);
					((TypeFunContext)_localctx)._paramTypes.Add(((TypeFunContext)_localctx)._stellatype);
					State = 637;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 633;
						Match(Surrogate_id_SYMB_0);
						State = 634;
						((TypeFunContext)_localctx)._stellatype = stellatype(0);
						((TypeFunContext)_localctx)._paramTypes.Add(((TypeFunContext)_localctx)._stellatype);
						}
						}
						State = 639;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 642;
				Match(Surrogate_id_SYMB_3);
				State = 643;
				Match(Surrogate_id_SYMB_8);
				State = 644;
				((TypeFunContext)_localctx).returnType = stellatype(12);
				}
				break;
			case 5:
				{
				_localctx = new TypeForAllContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 645;
				Match(FORALL);
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==StellaIdent) {
					{
					{
					State = 646;
					((TypeForAllContext)_localctx)._StellaIdent = Match(StellaIdent);
					((TypeForAllContext)_localctx)._types.Add(((TypeForAllContext)_localctx)._StellaIdent);
					}
					}
					State = 651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 652;
				Match(Surrogate_id_SYMB_25);
				State = 653;
				((TypeForAllContext)_localctx).type_ = stellatype(11);
				}
				break;
			case 6:
				{
				_localctx = new TypeRecContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 654;
				Match(Surrogate_id_SYMB_65);
				State = 655;
				((TypeRecContext)_localctx).var = Match(StellaIdent);
				State = 656;
				Match(Surrogate_id_SYMB_25);
				State = 657;
				((TypeRecContext)_localctx).type_ = stellatype(10);
				}
				break;
			case 7:
				{
				_localctx = new TypeTupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 658;
				Match(Surrogate_id_SYMB_4);
				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Surrogate_id_SYMB_2) | (1L << Surrogate_id_SYMB_4) | (1L << Surrogate_id_SYMB_11) | (1L << Surrogate_id_SYMB_13) | (1L << Surrogate_id_SYMB_32) | (1L << Surrogate_id_SYMB_33) | (1L << Surrogate_id_SYMB_34) | (1L << Surrogate_id_SYMB_43))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Surrogate_id_SYMB_65 - 66)) | (1L << (REF_TYPE - 66)) | (1L << (TOP_TYPE - 66)) | (1L << (BOTTOM_TYPE - 66)) | (1L << (FORALL - 66)) | (1L << (StellaIdent - 66)))) != 0)) {
					{
					State = 659;
					((TypeTupleContext)_localctx)._stellatype = stellatype(0);
					((TypeTupleContext)_localctx)._types.Add(((TypeTupleContext)_localctx)._stellatype);
					State = 664;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 660;
						Match(Surrogate_id_SYMB_0);
						State = 661;
						((TypeTupleContext)_localctx)._stellatype = stellatype(0);
						((TypeTupleContext)_localctx)._types.Add(((TypeTupleContext)_localctx)._stellatype);
						}
						}
						State = 666;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 669;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 8:
				{
				_localctx = new TypeRecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 670;
				Match(Surrogate_id_SYMB_4);
				State = 671;
				((TypeRecordContext)_localctx)._recordFieldType = recordFieldType();
				((TypeRecordContext)_localctx)._fieldTypes.Add(((TypeRecordContext)_localctx)._recordFieldType);
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Surrogate_id_SYMB_0) {
					{
					{
					State = 672;
					Match(Surrogate_id_SYMB_0);
					State = 673;
					((TypeRecordContext)_localctx)._recordFieldType = recordFieldType();
					((TypeRecordContext)_localctx)._fieldTypes.Add(((TypeRecordContext)_localctx)._recordFieldType);
					}
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 679;
				Match(Surrogate_id_SYMB_5);
				}
				break;
			case 9:
				{
				_localctx = new TypeVariantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 681;
				Match(Surrogate_id_SYMB_11);
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==StellaIdent) {
					{
					State = 682;
					((TypeVariantContext)_localctx)._variantFieldType = variantFieldType();
					((TypeVariantContext)_localctx)._fieldTypes.Add(((TypeVariantContext)_localctx)._variantFieldType);
					State = 687;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Surrogate_id_SYMB_0) {
						{
						{
						State = 683;
						Match(Surrogate_id_SYMB_0);
						State = 684;
						((TypeVariantContext)_localctx)._variantFieldType = variantFieldType();
						((TypeVariantContext)_localctx)._fieldTypes.Add(((TypeVariantContext)_localctx)._variantFieldType);
						}
						}
						State = 689;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 692;
				Match(Surrogate_id_SYMB_12);
				}
				break;
			case 10:
				{
				_localctx = new TypeListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 693;
				Match(Surrogate_id_SYMB_13);
				State = 694;
				((TypeListContext)_localctx).type_ = stellatype(0);
				State = 695;
				Match(Surrogate_id_SYMB_14);
				}
				break;
			case 11:
				{
				_localctx = new TypeUnitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 697;
				Match(Surrogate_id_SYMB_34);
				}
				break;
			case 12:
				{
				_localctx = new TypeTopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 698;
				Match(TOP_TYPE);
				}
				break;
			case 13:
				{
				_localctx = new TypeBottomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 699;
				Match(BOTTOM_TYPE);
				}
				break;
			case 14:
				{
				_localctx = new TypeVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 700;
				((TypeVarContext)_localctx).name = Match(StellaIdent);
				}
				break;
			case 15:
				{
				_localctx = new TypeParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 701;
				Match(Surrogate_id_SYMB_2);
				State = 702;
				((TypeParensContext)_localctx).type_ = stellatype(0);
				State = 703;
				Match(Surrogate_id_SYMB_3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeSumContext(new StellatypeContext(_parentctx, _parentState));
					((TypeSumContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_stellatype);
					State = 707;
					if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
					State = 708;
					Match(Surrogate_id_SYMB_21);
					State = 709;
					((TypeSumContext)_localctx).right = stellatype(14);
					}
					} 
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RecordFieldTypeContext : ParserRuleContext {
		public IToken label;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_7() { return GetToken(stellaParser.Surrogate_id_SYMB_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public RecordFieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordFieldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordFieldTypeContext recordFieldType() {
		RecordFieldTypeContext _localctx = new RecordFieldTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_recordFieldType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			_localctx.label = Match(StellaIdent);
			State = 716;
			Match(Surrogate_id_SYMB_7);
			State = 717;
			_localctx.type_ = stellatype(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantFieldTypeContext : ParserRuleContext {
		public IToken label;
		public StellatypeContext type_;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StellaIdent() { return GetToken(stellaParser.StellaIdent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_7() { return GetToken(stellaParser.Surrogate_id_SYMB_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StellatypeContext stellatype() {
			return GetRuleContext<StellatypeContext>(0);
		}
		public VariantFieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantFieldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstellaParserVisitor<TResult> typedVisitor = visitor as IstellaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantFieldTypeContext variantFieldType() {
		VariantFieldTypeContext _localctx = new VariantFieldTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_variantFieldType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_localctx.label = Match(StellaIdent);
			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Surrogate_id_SYMB_7) {
				{
				State = 720;
				Match(Surrogate_id_SYMB_7);
				State = 721;
				_localctx.type_ = stellatype(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		case 13: return pattern_sempred((PatternContext)_localctx, predIndex);
		case 15: return stellatype_sempred((StellatypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 30);
		case 1: return Precpred(Context, 29);
		case 2: return Precpred(Context, 28);
		case 3: return Precpred(Context, 25);
		case 4: return Precpred(Context, 24);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 58);
		case 15: return Precpred(Context, 57);
		case 16: return Precpred(Context, 32);
		case 17: return Precpred(Context, 31);
		case 18: return Precpred(Context, 22);
		case 19: return Precpred(Context, 21);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pattern_sempred(PatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 2);
		}
		return true;
	}
	private bool stellatype_sempred(StellatypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 13);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Z', '\x2D7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x32', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x35', '\v', '\x5', '\x3', '\x5', '\a', '\x5', '\x38', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', ';', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x46', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'I', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\a', '\b', 
		'N', '\n', '\b', '\f', '\b', '\xE', '\b', 'Q', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'Y', '\n', '\b', '\f', '\b', '\xE', '\b', '\\', '\v', '\b', '\x5', 
		'\b', '^', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x63', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', 'i', '\n', '\b', '\f', '\b', '\xE', '\b', 'l', '\v', '\b', 
		'\x5', '\b', 'n', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'r', 
		'\n', '\b', '\f', '\b', '\xE', '\b', 'u', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '|', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\x7F', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x88', '\n', '\b', '\f', '\b', '\xE', '\b', '\x8B', '\v', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x92', '\n', '\b', '\f', '\b', '\xE', '\b', '\x95', '\v', '\b', 
		'\x5', '\b', '\x97', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x9C', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\xA2', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\xA5', '\v', '\b', '\x5', '\b', '\xA7', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\xAB', '\n', '\b', '\f', '\b', '\xE', '\b', '\xAE', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xC1', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x141', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x144', '\v', '\v', '\x5', '\v', '\x146', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x152', '\n', '\v', '\f', '\v', '\xE', '\v', '\x155', '\v', 
		'\v', '\x5', '\v', '\x157', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x15E', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x161', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x169', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x172', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x175', '\v', '\v', '\x5', '\v', '\x177', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x17F', '\n', '\v', '\f', '\v', '\xE', '\v', '\x182', '\v', 
		'\v', '\x5', '\v', '\x184', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x192', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x195', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x19E', '\n', '\v', '\f', '\v', '\xE', '\v', '\x1A1', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x1AB', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x1AE', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x1B6', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x1ED', '\n', '\v', '\f', '\v', '\xE', '\v', '\x1F0', '\v', '\v', 
		'\x5', '\v', '\x1F2', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x1FA', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x1FD', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x20A', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x20D', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x220', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x231', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x234', '\v', '\xF', '\x5', '\xF', '\x236', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x23D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x240', 
		'\v', '\xF', '\x5', '\xF', '\x242', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x249', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x24C', '\v', '\xF', '\x5', '\xF', 
		'\x24E', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x266', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x26B', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x26E', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x27E', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x281', '\v', '\x11', '\x5', '\x11', 
		'\x283', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x28A', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x28D', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x299', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x29C', '\v', '\x11', '\x5', '\x11', '\x29E', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x2A5', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x2A8', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x2B0', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x2B3', '\v', '\x11', '\x5', '\x11', 
		'\x2B5', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x2C4', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x2C9', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x2CC', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x2D5', '\n', 
		'\x13', '\x3', '\x13', '\x2', '\x5', '\x14', '\x1C', ' ', '\x14', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', '\x2', '\x2', '\x350', 
		'\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '/', '\x3', '\x2', 
		'\x2', '\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', '@', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x16', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x212', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x265', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x26F', '\x3', '\x2', '\x2', '\x2', ' ', '\x2C3', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x2CD', '\x3', '\x2', '\x2', '\x2', '$', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\b', '\x5', '\x2', '\'', 
		'(', '\a', '\x2', '\x2', '\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x5', '\x14', '\v', '\x2', '*', '+', '\a', '\x2', '\x2', '\x3', 
		'+', '\x5', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', ' ', '\x11', 
		'\x2', '-', '.', '\a', '\x2', '\x2', '\x3', '.', '\a', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x33', '\x5', '\n', '\x6', '\x2', '\x30', '\x32', '\x5', 
		'\f', '\a', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\xE', '\b', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\t', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '\x35', '\x2', '\x2', '=', '>', '\a', ')', '\x2', '\x2', '>', 
		'?', '\a', '\x4', '\x2', '\x2', '?', '\v', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '+', '\x2', '\x2', '\x41', '\x42', '\a', '\x43', '\x2', 
		'\x2', '\x42', 'G', '\a', 'V', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', 
		'\x2', '\x2', '\x44', '\x46', '\a', 'V', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 
		'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', '\r', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x5', '\x10', '\t', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '.', '\x2', '\x2', 
		'S', 'T', '\a', 'U', '\x2', '\x2', 'T', ']', '\a', '\x5', '\x2', '\x2', 
		'U', 'Z', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', '\x3', '\x2', '\x2', 
		'W', 'Y', '\x5', '\x12', '\n', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', 'U', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x62', '\a', '\x6', '\x2', '\x2', '`', '\x61', '\a', 
		'\v', '\x2', '\x2', '\x61', '\x63', '\x5', ' ', '\x11', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', 'm', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'>', '\x2', '\x2', '\x65', 'j', '\x5', ' ', '\x11', '\x2', '\x66', 'g', 
		'\a', '\x3', '\x2', '\x2', 'g', 'i', '\x5', ' ', '\x11', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 
		'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', '\x64', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 's', '\a', '\a', '\x2', 
		'\x2', 'p', 'r', '\x5', '\xE', '\b', '\x2', 'q', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', ';', '\x2', 
		'\x2', 'w', 'x', '\x5', '\x14', '\v', '\x2', 'x', 'y', '\a', '\b', '\x2', 
		'\x2', 'y', '\xC1', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x5', '\x10', 
		'\t', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', 'Q', '\x2', '\x2', 
		'\x81', '\x82', '\a', '.', '\x2', '\x2', '\x82', '\x83', '\a', 'U', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\x10', '\x2', '\x2', '\x84', '\x89', '\a', 
		'U', '\x2', '\x2', '\x85', '\x86', '\a', '\x3', '\x2', '\x2', '\x86', 
		'\x88', '\a', 'U', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\x11', '\x2', '\x2', '\x8D', '\x96', '\a', 
		'\x5', '\x2', '\x2', '\x8E', '\x93', '\x5', '\x12', '\n', '\x2', '\x8F', 
		'\x90', '\a', '\x3', '\x2', '\x2', '\x90', '\x92', '\x5', '\x12', '\n', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\a', '\x6', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\v', '\x2', '\x2', '\x9A', '\x9C', '\x5', 
		' ', '\x11', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\a', '>', '\x2', '\x2', '\x9E', '\xA3', '\x5', 
		' ', '\x11', '\x2', '\x9F', '\xA0', '\a', '\x3', '\x2', '\x2', '\xA0', 
		'\xA2', '\x5', ' ', '\x11', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAC', '\a', '\a', '\x2', '\x2', '\xA9', '\xAB', '\x5', '\xE', '\b', 
		'\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		';', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\x14', '\v', '\x2', '\xB1', 
		'\xB2', '\a', '\b', '\x2', '\x2', '\xB2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '@', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'U', '\x2', '\x2', '\xB5', '\xB6', '\a', '\t', '\x2', '\x2', '\xB6', '\xC1', 
		'\x5', ' ', '\x11', '\x2', '\xB7', '\xB8', '\a', '\x45', '\x2', '\x2', 
		'\xB8', '\xB9', '\a', '@', '\x2', '\x2', '\xB9', '\xBA', '\a', '\t', '\x2', 
		'\x2', '\xBA', '\xC1', '\x5', ' ', '\x11', '\x2', '\xBB', '\xBC', '\a', 
		'\x45', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x46', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', 'U', '\x2', '\x2', '\xBE', '\xBF', '\a', '\n', '\x2', '\x2', 
		'\xBF', '\xC1', '\x5', ' ', '\x11', '\x2', '\xC0', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '}', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '\x33', '\x2', '\x2', '\xC3', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', 'U', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\n', '\x2', '\x2', '\xC6', '\xC7', '\x5', ' ', '\x11', 
		'\x2', '\xC7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\b', 
		'\v', '\x1', '\x2', '\xC9', '\x1B6', '\a', '?', '\x2', '\x2', '\xCA', 
		'\x1B6', '\a', ',', '\x2', '\x2', '\xCB', '\x1B6', '\a', '\x42', '\x2', 
		'\x2', '\xCC', '\x1B6', '\a', 'X', '\x2', '\x2', '\xCD', '\x1B6', '\a', 
		'W', '\x2', '\x2', '\xCE', '\x1B6', '\a', 'U', '\x2', '\x2', '\xCF', '\x1B6', 
		'\a', 'K', '\x2', '\x2', '\xD0', '\xD1', '\a', 'L', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x5', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x14', '\v', 
		'\x2', '\xD3', '\xD4', '\a', '\x6', '\x2', '\x2', '\xD4', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 'M', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\a', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x14', '\v', 
		'\x2', '\xD8', '\xD9', '\a', '\b', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'N', '\x2', '\x2', '\xDA', '\xDB', '\a', '\a', '\x2', '\x2', '\xDB', '\xDC', 
		'\x5', '\x1C', '\xF', '\x2', '\xDC', '\xDD', '\a', '\f', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x14', '\v', '\x2', '\xDE', '\xDF', '\a', '\b', 
		'\x2', '\x2', '\xDF', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', 'M', '\x2', '\x2', '\xE1', '\xE2', '\a', '\a', '\x2', '\x2', '\xE2', 
		'\xE3', '\x5', '\x14', '\v', '\x2', '\xE3', '\xE4', '\a', '\b', '\x2', 
		'\x2', '\xE4', '\xE5', '\a', '\x43', '\x2', '\x2', '\xE5', '\xE6', '\a', 
		'\a', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x14', '\v', '\x2', '\xE7', 
		'\xE8', '\a', '\b', '\x2', '\x2', '\xE8', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\a', '\x32', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'\x5', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x14', '\v', '\x2', '\xEC', 
		'\xED', '\a', '\x6', '\x2', '\x2', '\xED', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '\x34', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x5', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x14', '\v', '\x2', '\xF1', 
		'\xF2', '\a', '\x6', '\x2', '\x2', '\xF2', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\a', '(', '\x2', '\x2', '\xF4', '\xF5', '\a', 
		'\x5', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x14', '\v', '\x2', '\xF6', 
		'\xF7', '\a', '\x3', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x14', '\v', 
		'\x2', '\xF8', '\xF9', '\a', '\x6', '\x2', '\x2', '\xF9', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x1D', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\x5', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x14', '\v', 
		'\x2', '\xFD', '\xFE', '\a', '\x6', '\x2', '\x2', '\xFE', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x1E', '\x2', '\x2', '\x100', 
		'\x101', '\a', '\x5', '\x2', '\x2', '\x101', '\x102', '\x5', '\x14', '\v', 
		'\x2', '\x102', '\x103', '\a', '\x6', '\x2', '\x2', '\x103', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x1F', '\x2', '\x2', 
		'\x105', '\x106', '\a', '\x5', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'\x14', '\v', '\x2', '\x107', '\x108', '\a', '\x6', '\x2', '\x2', '\x108', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '<', '\x2', 
		'\x2', '\x10A', '\x10B', '\a', '\x5', '\x2', '\x2', '\x10B', '\x10C', 
		'\x5', '\x14', '\v', '\x2', '\x10C', '\x10D', '\a', '\x6', '\x2', '\x2', 
		'\x10D', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', 
		'\x39', '\x2', '\x2', '\x10F', '\x110', '\a', '\x5', '\x2', '\x2', '\x110', 
		'\x111', '\x5', '\x14', '\v', '\x2', '\x111', '\x112', '\a', '\x6', '\x2', 
		'\x2', '\x112', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', ' ', '\x2', '\x2', '\x114', '\x115', '\a', '\x5', '\x2', '\x2', 
		'\x115', '\x116', '\x5', '\x14', '\v', '\x2', '\x116', '\x117', '\a', 
		'\x6', '\x2', '\x2', '\x117', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '!', '\x2', '\x2', '\x119', '\x11A', '\a', '\x5', '\x2', 
		'\x2', '\x11A', '\x11B', '\x5', '\x14', '\v', '\x2', '\x11B', '\x11C', 
		'\a', '\x6', '\x2', '\x2', '\x11C', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '-', '\x2', '\x2', '\x11E', '\x11F', '\a', '\x5', 
		'\x2', '\x2', '\x11F', '\x120', '\x5', '\x14', '\v', '\x2', '\x120', '\x121', 
		'\a', '\x6', '\x2', '\x2', '\x121', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x123', '\a', '\"', '\x2', '\x2', '\x123', '\x124', '\a', '\x5', 
		'\x2', '\x2', '\x124', '\x125', '\x5', '\x14', '\v', '\x2', '\x125', '\x126', 
		'\a', '\x3', '\x2', '\x2', '\x126', '\x127', '\x5', '\x14', '\v', '\x2', 
		'\x127', '\x128', '\a', '\x3', '\x2', '\x2', '\x128', '\x129', '\x5', 
		'\x14', '\v', '\x2', '\x129', '\x12A', '\a', '\x6', '\x2', '\x2', '\x12A', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '/', '\x2', 
		'\x2', '\x12C', '\x12D', '\a', '\x10', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', ' ', '\x11', '\x2', '\x12E', '\x12F', '\a', '\x11', '\x2', '\x2', 
		'\x12F', '\x130', '\x5', '\x14', '\v', '$', '\x130', '\x1B6', '\x3', '\x2', 
		'\x2', '\x2', '\x131', '\x132', '\a', '\x41', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\x10', '\x2', '\x2', '\x133', '\x134', '\x5', ' ', '\x11', '\x2', 
		'\x134', '\x135', '\a', '\x11', '\x2', '\x2', '\x135', '\x136', '\x5', 
		'\x14', '\v', '#', '\x136', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\a', 'J', '\x2', '\x2', '\x138', '\x1B6', '\x5', '\x14', '\v', 
		'\x1D', '\x139', '\x13A', '\a', '\x1A', '\x2', '\x2', '\x13A', '\x1B6', 
		'\x5', '\x14', '\v', '\x1C', '\x13B', '\x13C', '\a', '.', '\x2', '\x2', 
		'\x13C', '\x145', '\a', '\x5', '\x2', '\x2', '\x13D', '\x142', '\x5', 
		'\x12', '\n', '\x2', '\x13E', '\x13F', '\a', '\x3', '\x2', '\x2', '\x13F', 
		'\x141', '\x5', '\x12', '\n', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x144', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\a', '\x6', '\x2', '\x2', '\x148', '\x149', 
		'\a', '\a', '\x2', '\x2', '\x149', '\x14A', '\a', ';', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', '\x14', '\v', '\x2', '\x14B', '\x14C', '\a', '\b', '\x2', 
		'\x2', '\x14C', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x156', 
		'\a', '\a', '\x2', '\x2', '\x14E', '\x153', '\x5', '\x14', '\v', '\x2', 
		'\x14F', '\x150', '\a', '\x3', '\x2', '\x2', '\x150', '\x152', '\x5', 
		'\x14', '\v', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x1B6', '\a', '\b', '\x2', '\x2', '\x159', '\x15A', '\a', '\a', '\x2', 
		'\x2', '\x15A', '\x15F', '\x5', '\x18', '\r', '\x2', '\x15B', '\x15C', 
		'\a', '\x3', '\x2', '\x2', '\x15C', '\x15E', '\x5', '\x18', '\r', '\x2', 
		'\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\a', '\b', '\x2', '\x2', '\x163', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\xE', '\x2', '\x2', '\x165', '\x168', '\a', 'U', 
		'\x2', '\x2', '\x166', '\x167', '\a', '\t', '\x2', '\x2', '\x167', '\x169', 
		'\x5', '\x14', '\v', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x1B6', '\a', '\xF', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', '\x38', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x14', 
		'\v', '\x2', '\x16D', '\x176', '\a', '\a', '\x2', '\x2', '\x16E', '\x173', 
		'\x5', '\x1A', '\xE', '\x2', '\x16F', '\x170', '\a', '\r', '\x2', '\x2', 
		'\x170', '\x172', '\x5', '\x1A', '\xE', '\x2', '\x171', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x179', '\a', '\b', '\x2', '\x2', '\x179', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x183', '\a', '\x10', '\x2', 
		'\x2', '\x17B', '\x180', '\x5', '\x14', '\v', '\x2', '\x17C', '\x17D', 
		'\a', '\x3', '\x2', '\x2', '\x17D', '\x17F', '\x5', '\x14', '\v', '\x2', 
		'\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x1B6', '\a', 
		'\x11', '\x2', '\x2', '\x186', '\x187', '\a', '\x30', '\x2', '\x2', '\x187', 
		'\x188', '\x5', '\x14', '\v', '\x2', '\x188', '\x189', '\a', '=', '\x2', 
		'\x2', '\x189', '\x18A', '\x5', '\x14', '\v', '\x2', '\x18A', '\x18B', 
		'\a', '*', '\x2', '\x2', '\x18B', '\x18C', '\x5', '\x14', '\v', '\t', 
		'\x18C', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\a', 
		'\x36', '\x2', '\x2', '\x18E', '\x193', '\x5', '\x16', '\f', '\x2', '\x18F', 
		'\x190', '\a', '\x3', '\x2', '\x2', '\x190', '\x192', '\x5', '\x16', '\f', 
		'\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x192', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\a', '\x31', '\x2', '\x2', '\x197', '\x198', '\x5', '\x14', 
		'\v', '\a', '\x198', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\a', '\x37', '\x2', '\x2', '\x19A', '\x19F', '\x5', '\x16', '\f', '\x2', 
		'\x19B', '\x19C', '\a', '\x3', '\x2', '\x2', '\x19C', '\x19E', '\x5', 
		'\x16', '\f', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\a', '\x31', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 
		'\x14', '\v', '\x6', '\x1A4', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', 'Q', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x10', '\x2', 
		'\x2', '\x1A7', '\x1AC', '\a', 'U', '\x2', '\x2', '\x1A8', '\x1A9', '\a', 
		'\x3', '\x2', '\x2', '\x1A9', '\x1AB', '\a', 'U', '\x2', '\x2', '\x1AA', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 
		'\x11', '\x2', '\x2', '\x1B0', '\x1B6', '\x5', '\x14', '\v', '\x5', '\x1B1', 
		'\x1B2', '\a', '\x5', '\x2', '\x2', '\x1B2', '\x1B3', '\x5', '\x14', '\v', 
		'\x2', '\x1B3', '\x1B4', '\a', '\x6', '\x2', '\x2', '\x1B4', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x109', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x113', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x122', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x137', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x164', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x186', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\f', ' ', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x1A', '\x2', '\x2', 
		'\x1B9', '\x20A', '\x5', '\x14', '\v', '!', '\x1BA', '\x1BB', '\f', '\x1F', 
		'\x2', '\x2', '\x1BB', '\x1BC', '\a', '\x1B', '\x2', '\x2', '\x1BC', '\x20A', 
		'\x5', '\x14', '\v', ' ', '\x1BD', '\x1BE', '\f', '\x1E', '\x2', '\x2', 
		'\x1BE', '\x1BF', '\a', '&', '\x2', '\x2', '\x1BF', '\x20A', '\x5', '\x14', 
		'\v', '\x1F', '\x1C0', '\x1C1', '\f', '\x1B', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\a', '\x18', '\x2', '\x2', '\x1C2', '\x20A', '\x5', '\x14', '\v', '\x1C', 
		'\x1C3', '\x1C4', '\f', '\x1A', '\x2', '\x2', '\x1C4', '\x1C5', '\a', 
		'\x19', '\x2', '\x2', '\x1C5', '\x20A', '\x5', '\x14', '\v', '\x1B', '\x1C6', 
		'\x1C7', '\f', '\x19', '\x2', '\x2', '\x1C7', '\x1C8', '\a', ':', '\x2', 
		'\x2', '\x1C8', '\x20A', '\x5', '\x14', '\v', '\x1A', '\x1C9', '\x1CA', 
		'\f', '\x10', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x12', '\x2', '\x2', 
		'\x1CB', '\x20A', '\x5', '\x14', '\v', '\x11', '\x1CC', '\x1CD', '\f', 
		'\xF', '\x2', '\x2', '\x1CD', '\x1CE', '\a', '\x13', '\x2', '\x2', '\x1CE', 
		'\x20A', '\x5', '\x14', '\v', '\x10', '\x1CF', '\x1D0', '\f', '\xE', '\x2', 
		'\x2', '\x1D0', '\x1D1', '\a', '\x14', '\x2', '\x2', '\x1D1', '\x20A', 
		'\x5', '\x14', '\v', '\xF', '\x1D2', '\x1D3', '\f', '\r', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\a', '\x15', '\x2', '\x2', '\x1D4', '\x20A', '\x5', 
		'\x14', '\v', '\xE', '\x1D5', '\x1D6', '\f', '\f', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\a', '\x16', '\x2', '\x2', '\x1D7', '\x20A', '\x5', '\x14', 
		'\v', '\r', '\x1D8', '\x1D9', '\f', '\v', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x17', '\x2', '\x2', '\x1DA', '\x20A', '\x5', '\x14', '\v', '\f', 
		'\x1DB', '\x1DC', '\f', '\n', '\x2', '\x2', '\x1DC', '\x1DD', '\a', 'H', 
		'\x2', '\x2', '\x1DD', '\x20A', '\x5', '\x14', '\v', '\v', '\x1DE', '\x1DF', 
		'\f', '\b', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x4', '\x2', '\x2', 
		'\x1E0', '\x20A', '\x5', '\x14', '\v', '\t', '\x1E1', '\x1E2', '\f', '<', 
		'\x2', '\x2', '\x1E2', '\x1E3', '\a', '\x1C', '\x2', '\x2', '\x1E3', '\x20A', 
		'\a', 'U', '\x2', '\x2', '\x1E4', '\x1E5', '\f', ';', '\x2', '\x2', '\x1E5', 
		'\x1E6', '\a', '\x1C', '\x2', '\x2', '\x1E6', '\x20A', '\a', 'X', '\x2', 
		'\x2', '\x1E7', '\x1E8', '\f', '\"', '\x2', '\x2', '\x1E8', '\x1F1', '\a', 
		'\x5', '\x2', '\x2', '\x1E9', '\x1EE', '\x5', '\x14', '\v', '\x2', '\x1EA', 
		'\x1EB', '\a', '\x3', '\x2', '\x2', '\x1EB', '\x1ED', '\x5', '\x14', '\v', 
		'\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x20A', 
		'\a', '\x6', '\x2', '\x2', '\x1F4', '\x1F5', '\f', '!', '\x2', '\x2', 
		'\x1F5', '\x1F6', '\a', '\x10', '\x2', '\x2', '\x1F6', '\x1FB', '\x5', 
		' ', '\x11', '\x2', '\x1F7', '\x1F8', '\a', '\x3', '\x2', '\x2', '\x1F8', 
		'\x1FA', '\x5', ' ', '\x11', '\x2', '\x1F9', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\a', '\x11', '\x2', '\x2', '\x1FF', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\f', '\x18', '\x2', 
		'\x2', '\x201', '\x202', '\a', '\'', '\x2', '\x2', '\x202', '\x20A', '\x5', 
		' ', '\x11', '\x2', '\x203', '\x204', '\f', '\x17', '\x2', '\x2', '\x204', 
		'\x205', '\a', 'G', '\x2', '\x2', '\x205', '\x206', '\a', '\'', '\x2', 
		'\x2', '\x206', '\x20A', '\x5', ' ', '\x11', '\x2', '\x207', '\x208', 
		'\f', '\x3', '\x2', '\x2', '\x208', '\x20A', '\a', '\x4', '\x2', '\x2', 
		'\x209', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x209', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x209', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1D2', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x209', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x209', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x200', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x209', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x15', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x20E', '\x20F', '\x5', '\x1C', '\xF', '\x2', '\x20F', 
		'\x210', '\a', '\t', '\x2', '\x2', '\x210', '\x211', '\x5', '\x14', '\v', 
		'\x2', '\x211', '\x17', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', 
		'\a', 'U', '\x2', '\x2', '\x213', '\x214', '\a', '\t', '\x2', '\x2', '\x214', 
		'\x215', '\x5', '\x14', '\v', '\x2', '\x215', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x217', '\x5', '\x1C', '\xF', '\x2', '\x217', '\x218', 
		'\a', '\f', '\x2', '\x2', '\x218', '\x219', '\x5', '\x14', '\v', '\x2', 
		'\x219', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\b', '\xF', 
		'\x1', '\x2', '\x21B', '\x21C', '\a', '\xE', '\x2', '\x2', '\x21C', '\x21F', 
		'\a', 'U', '\x2', '\x2', '\x21D', '\x21E', '\a', '\t', '\x2', '\x2', '\x21E', 
		'\x220', '\x5', '\x1C', '\xF', '\x2', '\x21F', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x266', '\a', '\xF', '\x2', '\x2', 
		'\x222', '\x223', '\a', '\x32', '\x2', '\x2', '\x223', '\x224', '\a', 
		'\x5', '\x2', '\x2', '\x224', '\x225', '\x5', '\x1C', '\xF', '\x2', '\x225', 
		'\x226', '\a', '\x6', '\x2', '\x2', '\x226', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x228', '\a', '\x34', '\x2', '\x2', '\x228', '\x229', 
		'\a', '\x5', '\x2', '\x2', '\x229', '\x22A', '\x5', '\x1C', '\xF', '\x2', 
		'\x22A', '\x22B', '\a', '\x6', '\x2', '\x2', '\x22B', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x235', '\a', '\a', '\x2', '\x2', '\x22D', 
		'\x232', '\x5', '\x1C', '\xF', '\x2', '\x22E', '\x22F', '\a', '\x3', '\x2', 
		'\x2', '\x22F', '\x231', '\x5', '\x1C', '\xF', '\x2', '\x230', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x232', '\x230', '\x3', '\x2', '\x2', '\x2', '\x232', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x233', '\x236', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x235', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x266', '\a', '\b', '\x2', '\x2', 
		'\x238', '\x241', '\a', '\a', '\x2', '\x2', '\x239', '\x23E', '\x5', '\x1E', 
		'\x10', '\x2', '\x23A', '\x23B', '\a', '\x3', '\x2', '\x2', '\x23B', '\x23D', 
		'\x5', '\x1E', '\x10', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23D', '\x240', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23C', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x240', '\x23E', '\x3', '\x2', '\x2', 
		'\x2', '\x241', '\x239', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x266', '\a', '\b', '\x2', '\x2', '\x244', '\x24D', '\a', '\x10', 
		'\x2', '\x2', '\x245', '\x24A', '\x5', '\x1C', '\xF', '\x2', '\x246', 
		'\x247', '\a', '\x3', '\x2', '\x2', '\x247', '\x249', '\x5', '\x1C', '\xF', 
		'\x2', '\x248', '\x246', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x24A', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x266', 
		'\a', '\x11', '\x2', '\x2', '\x250', '\x251', '\a', '(', '\x2', '\x2', 
		'\x251', '\x252', '\a', '\x5', '\x2', '\x2', '\x252', '\x253', '\x5', 
		'\x1C', '\xF', '\x2', '\x253', '\x254', '\a', '\x3', '\x2', '\x2', '\x254', 
		'\x255', '\x5', '\x1C', '\xF', '\x2', '\x255', '\x256', '\a', '\x6', '\x2', 
		'\x2', '\x256', '\x266', '\x3', '\x2', '\x2', '\x2', '\x257', '\x266', 
		'\a', ',', '\x2', '\x2', '\x258', '\x266', '\a', '?', '\x2', '\x2', '\x259', 
		'\x266', '\a', '\x42', '\x2', '\x2', '\x25A', '\x266', '\a', 'X', '\x2', 
		'\x2', '\x25B', '\x25C', '\a', '<', '\x2', '\x2', '\x25C', '\x25D', '\a', 
		'\x5', '\x2', '\x2', '\x25D', '\x25E', '\x5', '\x1C', '\xF', '\x2', '\x25E', 
		'\x25F', '\a', '\x6', '\x2', '\x2', '\x25F', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x260', '\x266', '\a', 'U', '\x2', '\x2', '\x261', '\x262', '\a', 
		'\x5', '\x2', '\x2', '\x262', '\x263', '\x5', '\x1C', '\xF', '\x2', '\x263', 
		'\x264', '\a', '\x6', '\x2', '\x2', '\x264', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x265', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '\x265', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x265', '\x238', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x244', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'\x250', '\x3', '\x2', '\x2', '\x2', '\x265', '\x257', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x258', '\x3', '\x2', '\x2', '\x2', '\x265', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x265', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x265', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x261', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x26C', '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\f', '\x4', '\x2', 
		'\x2', '\x268', '\x269', '\a', '\'', '\x2', '\x2', '\x269', '\x26B', '\x5', 
		' ', '\x11', '\x2', '\x26A', '\x267', '\x3', '\x2', '\x2', '\x2', '\x26B', 
		'\x26E', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\a', 'U', '\x2', '\x2', '\x270', '\x271', '\a', '\t', 
		'\x2', '\x2', '\x271', '\x272', '\x5', '\x1C', '\xF', '\x2', '\x272', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\b', '\x11', '\x1', 
		'\x2', '\x274', '\x2C4', '\a', '#', '\x2', '\x2', '\x275', '\x2C4', '\a', 
		'$', '\x2', '\x2', '\x276', '\x277', '\a', 'I', '\x2', '\x2', '\x277', 
		'\x2C4', '\x5', ' ', '\x11', '\x10', '\x278', '\x279', '\a', '.', '\x2', 
		'\x2', '\x279', '\x282', '\a', '\x5', '\x2', '\x2', '\x27A', '\x27F', 
		'\x5', ' ', '\x11', '\x2', '\x27B', '\x27C', '\a', '\x3', '\x2', '\x2', 
		'\x27C', '\x27E', '\x5', ' ', '\x11', '\x2', '\x27D', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x281', '\x3', '\x2', '\x2', '\x2', '\x27F', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', 
		'\x2', '\x280', '\x283', '\x3', '\x2', '\x2', '\x2', '\x281', '\x27F', 
		'\x3', '\x2', '\x2', '\x2', '\x282', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x285', '\a', '\x6', '\x2', '\x2', '\x285', 
		'\x286', '\a', '\v', '\x2', '\x2', '\x286', '\x2C4', '\x5', ' ', '\x11', 
		'\xE', '\x287', '\x28B', '\a', 'R', '\x2', '\x2', '\x288', '\x28A', '\a', 
		'U', '\x2', '\x2', '\x289', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x289', '\x3', '\x2', '\x2', 
		'\x2', '\x28B', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x28F', '\a', '\x1C', '\x2', '\x2', '\x28F', '\x2C4', '\x5', 
		' ', '\x11', '\r', '\x290', '\x291', '\a', '\x44', '\x2', '\x2', '\x291', 
		'\x292', '\a', 'U', '\x2', '\x2', '\x292', '\x293', '\a', '\x1C', '\x2', 
		'\x2', '\x293', '\x2C4', '\x5', ' ', '\x11', '\f', '\x294', '\x29D', '\a', 
		'\a', '\x2', '\x2', '\x295', '\x29A', '\x5', ' ', '\x11', '\x2', '\x296', 
		'\x297', '\a', '\x3', '\x2', '\x2', '\x297', '\x299', '\x5', ' ', '\x11', 
		'\x2', '\x298', '\x296', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', 
		'\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2C4', 
		'\a', '\b', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\a', '\x2', '\x2', 
		'\x2A1', '\x2A6', '\x5', '\"', '\x12', '\x2', '\x2A2', '\x2A3', '\a', 
		'\x3', '\x2', '\x2', '\x2A3', '\x2A5', '\x5', '\"', '\x12', '\x2', '\x2A4', 
		'\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A7', 
		'\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\a', 
		'\b', '\x2', '\x2', '\x2AA', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2B4', '\a', '\xE', '\x2', '\x2', '\x2AC', '\x2B1', '\x5', '$', '\x13', 
		'\x2', '\x2AD', '\x2AE', '\a', '\x3', '\x2', '\x2', '\x2AE', '\x2B0', 
		'\x5', '$', '\x13', '\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B1', '\x3', '\x2', '\x2', 
		'\x2', '\x2B4', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2C4', '\a', '\xF', '\x2', '\x2', '\x2B7', '\x2B8', '\a', '\x10', 
		'\x2', '\x2', '\x2B8', '\x2B9', '\x5', ' ', '\x11', '\x2', '\x2B9', '\x2BA', 
		'\a', '\x11', '\x2', '\x2', '\x2BA', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2BB', '\x2C4', '\a', '%', '\x2', '\x2', '\x2BC', '\x2C4', '\a', 'O', 
		'\x2', '\x2', '\x2BD', '\x2C4', '\a', 'P', '\x2', '\x2', '\x2BE', '\x2C4', 
		'\a', 'U', '\x2', '\x2', '\x2BF', '\x2C0', '\a', '\x5', '\x2', '\x2', 
		'\x2C0', '\x2C1', '\x5', ' ', '\x11', '\x2', '\x2C1', '\x2C2', '\a', '\x6', 
		'\x2', '\x2', '\x2C2', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x276', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x278', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x287', '\x3', '\x2', '\x2', '\x2', '\x2C3', 
		'\x290', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BC', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2C3', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BF', '\x3', '\x2', '\x2', 
		'\x2', '\x2C4', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', 
		'\f', '\xF', '\x2', '\x2', '\x2C6', '\x2C7', '\a', '\x18', '\x2', '\x2', 
		'\x2C7', '\x2C9', '\x5', ' ', '\x11', '\x10', '\x2C8', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '!', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CA', '\x3', 
		'\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\a', 'U', '\x2', '\x2', '\x2CE', 
		'\x2CF', '\a', '\n', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', ' ', '\x11', 
		'\x2', '\x2D0', '#', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', '\a', 
		'U', '\x2', '\x2', '\x2D2', '\x2D3', '\a', '\n', '\x2', '\x2', '\x2D3', 
		'\x2D5', '\x5', ' ', '\x11', '\x2', '\x2D4', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x2D4', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D5', '%', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x33', '\x39', 'G', 'O', 'Z', ']', '\x62', 
		'j', 'm', 's', '}', '\x89', '\x93', '\x96', '\x9B', '\xA3', '\xA6', '\xAC', 
		'\xC0', '\x142', '\x145', '\x153', '\x156', '\x15F', '\x168', '\x173', 
		'\x176', '\x180', '\x183', '\x193', '\x19F', '\x1AC', '\x1B5', '\x1EE', 
		'\x1F1', '\x1FB', '\x209', '\x20B', '\x21F', '\x232', '\x235', '\x23E', 
		'\x241', '\x24A', '\x24D', '\x265', '\x26C', '\x27F', '\x282', '\x28B', 
		'\x29A', '\x29D', '\x2A6', '\x2B1', '\x2B4', '\x2C3', '\x2CA', '\x2D4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
